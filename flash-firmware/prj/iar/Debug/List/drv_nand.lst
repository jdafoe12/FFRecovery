###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_nand.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_nand.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\drv_nand.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\drv_nand.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_nand.c
      1          /*************************************************************************
      2           *
      3           *   Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2008
      6           *
      7           *    File name   : drv_nand.c
      8           *    Description : lpc313x Nand driver
      9           *
     10           *    History :
     11           *    1. Date        : 03.4.2009 ?
     12           *       Author      : Stoyan Choynev
     13           *       Description : Initial Revision
     14           *    2. Date        : 10.01.2010
     15           *
     16           *    $Revision: 30870 $
     17           **************************************************************************/
     18          
     19          /** include files **/
     20          #include "drv_cgu.h"
     21          #include "drv_nand.h"
     22          
     23          #include <core\inc\cmn.h>
     24          #include <core\mtd\mtd_nand.h>
     25          
     26          
     27          /** public functions **/
     28          void NAND_Init()
     29          {
     30             volatile Int32U i;
     31          
     32             /*Select EBI/MPMC pins*/
     33             SYSCREG_MUX_LCD_EBI_SEL_bit.Mux_LCD_EBI_sel = 1;
     34          
     35             CGU_Run_Clock(EBI_CLK);
     36             /*Enable MPMC clocks*/
     37             CGU_Run_Clock(MPMC_CFG_CLK);
     38             CGU_Run_Clock(MPMC_CFG_CLK2);
     39             CGU_Run_Clock(MPMC_CFG_CLK3);
     40          
     41             /* Enable NAND Flash Controller Clocks */
     42             CGU_Run_Clock(NANDFLASH_S0_CLK);
     43             CGU_Run_Clock(NANDFLASH_ECC_CLK);
     44             CGU_Run_Clock(NANDFLASH_NAND_CLK);
     45             CGU_Run_Clock(NANDFLASH_PCLK);
     46          
     47             /*Reset NAND Flash Controller*/
     48             NANDFLASH_CTRL_NAND_RESET_N_SOFT = 0;
     49             for(volatile int i = 0 ; 10000 > i; i++);
     50             NANDFLASH_CTRL_NAND_RESET_N_SOFT = 1;
     51          
     52             NANDFLASH_CTRL_ECC_RESET_N_SOFT = 0;
     53             for(volatile int i = 0 ; 10000 > i; i++);
     54             NANDFLASH_CTRL_ECC_RESET_N_SOFT = 1;
     55          
     56             /**/
     57             SYSCREG_MUX_NAND_MCI_SEL_bit.Mux_NAND_MCI_sel = 0;
     58          
     59             /* TODO: nand timing
     60              * - shorten cycle time: 1+1 
     61              * - use EDO when tRC<30ns
     62              * - enough power supply to NAND
     63              */
     64             NandTiming1 = 0x00030333;
     65             NandTiming2 = 0x03333333;
     66          
     67             /*Nand Configuration Register*/
     68             NandConfig = (1<<0)|     /* Error Correction On    */
     69                          (0<<1)|     /* 8-bit flash device     */
     70                          (0<<3)|     /* DMA disabled           */
     71                          (0<<4)|     /* Little endian          */
     72                          (0<<5)|     /* Latency configuration  */
     73                          (0<<7)|     /* ECC started after 516B */
     74                          (1<<8)|     /* CE deactivated         */
     75                          (0<<10)|    /* 528 Bytes Read/Write   */
     76                          (0<<12);    /* 5-bit mode ECC         */
     77          
     78             NandSetCE = 0x1E;
     79             /* NAND Reset */
     80             /*Clear Status Flags*/
     81             NandIRQStatusRaw = 0xffffffff;
     82          
     83             /*Erase Command*/
     84             NandSetCmd = CMD_RESET;
     85             // wait for device ready
     86             while (!NandIRQStatusRaw_bit.INT28R);
     87          }
     88          
     89          
     90          void NAND_SelectChip(NAND_CHIP chip)
     91          {
     92             NandSetCE = 0xff & (((~(1<<chip)) | 1<<(chip+4)));
     93             //NandSetCE = 0x1f & (0x10 | (~(1<<chip)));
     94          }
     95          
     96          void NAND_DeSelectChip(NAND_CHIP chip)
     97          {
     98             /* de-select all chip */
     99             NandSetCE = 0x0f;
    100          }
    101          
    102          void NAND_SendCMD(NAND_CMD cmd)
    103          {
    104             /*Clear Status Flags*/
    105             NandIRQStatusRaw = 0xffffffff;
    106          
    107             NandSetCmd = cmd;
    108          }
    109          
    110          void NAND_SendAddr(NAND_COL col, NAND_ROW row, UINT8 col_cycle, UINT8 row_cycle)
    111          {
    112             /*Column*/
    113             for(int i = 0 ; i<col_cycle ; i++)
    114             {
    115                /*Load Column*/
    116                NandSetAddr = col & 0xFF;
    117                /*Shift Column*/
    118                col>>=8;
    119             }
    120          
    121             /*Row*/
    122             for(int i = 0 ; i<row_cycle ; i++)
    123             {
    124                /*Load Row*/
    125                NandSetAddr = row & 0xFF;
    126                /*Shift Row*/
    127                row>>=8;
    128             }
    129          }
    130          
    131          
    132          /* TODO: in multi-channel architecture, the nand transfer time can further
    133           * be masked by MCU calculation and DMA across channels. In single channel
    134           * platform, we only use interleave to improve performance. Recommend 10 ch!
    135           */
    136          
    137          void NAND_SendData(unsigned char* write_buffer, SPARE spare_data)
    138          {
    139             unsigned int      spare_32;
    140             unsigned char*    dest;
    141             unsigned char     i;
    142          
    143             for (i=0; i<SECTOR_PER_PAGE; i++)
    144             {
    145                dest = (unsigned char *) 0x70000000;
    146          
    147                /*Clear Status flags*/
    148                NandIRQStatusRaw = 0xffffffff;
    149          
    150                /* send write buffer to dest1 */
    151                if (write_buffer != NULL)
    152                {
    153                   memcpy(dest, write_buffer+i*SECTOR_SIZE, SECTOR_SIZE);
    154                }
    155                else
    156                {
    157                   memset(dest, 0xff, SECTOR_SIZE);
    158                }
    159          
    160                /* send spare data for dest1 */
    161                if (spare_data != NULL && i < SPARE_WORDS_IN_PAGE)
    162                {
    163                   spare_32 = spare_data[i];
    164          
    165                   dest[SECTOR_SIZE]   = (UINT8)(spare_32>>24);
    166                   dest[SECTOR_SIZE+1] = (UINT8)(spare_32>>16);
    167                   dest[SECTOR_SIZE+2] = (UINT8)(spare_32>>8);
    168                   dest[SECTOR_SIZE+3] = (UINT8)(spare_32);
    169                }
    170                else
    171                {
    172                   dest[SECTOR_SIZE]   = 0;
    173                   dest[SECTOR_SIZE+1] = 0;
    174                   dest[SECTOR_SIZE+2] = 0;
    175                   dest[SECTOR_SIZE+3] = 0;
    176                }
    177          
    178                /*Start data transfer*/
    179                /* TODO: can start transfer before ECC done? */
    180                NandControlFlow = 0x10;
    181          
    182                /*Wait ECC end*/
    183                while(!NandIRQStatusRaw_bit.INT20R);
    184          
    185                /*Wait trensfer end for dest1*/
    186                while(!NandIRQStatusRaw_bit.INT24R);
    187             }
    188          }
    189          
    190          
    191          STATUS NAND_ReceiveData(unsigned char* read_buffer, SPARE spare_data)
    192          {
    193             unsigned int      spare_32;
    194             unsigned char*    src;
    195             unsigned char     i;
    196          
    197             for (i=0; i<SECTOR_PER_PAGE; i++)
    198             {
    199                src = (unsigned char *) 0x70000000;
    200          
    201                /* Clear Status flags */
    202                NandIRQStatusRaw = 0xffffffff;
    203          
    204                /* Start Reading to src1 */
    205                NandControlFlow = 1;
    206          
    207                /* wait reading done to src1 */
    208                while(!NandIRQStatusRaw_bit.INT22R);
    209          
    210                /* Wait reading and ECC to complete in src1 */
    211                while(!NandIRQStatusRaw_bit.INT21R);
    212          
    213                if (NandIRQStatusRaw_bit.INT26R || NandIRQStatusRaw_bit.INT27R)
    214                {
    215                   /* return fail when reading erased (non_programmed) page */
    216                   return STATUS_FAILURE;
    217                }
    218          
    219                /* TODO: return error if ECC happen, including correctable. use MASK-reg */
    220                if(NandIRQStatusRaw_bit.INT11R || NandIRQStatusRaw_bit.INT4R)
    221                {
    222                   return STATUS_ECC_ERROR;
    223                }
    224          
    225                /* DMA data src1 */
    226                if (read_buffer != NULL)
    227                {
    228                   memcpy(read_buffer+i*SECTOR_SIZE, src, SECTOR_SIZE);
    229                }
    230          
    231                if (spare_data != NULL && i < SPARE_WORDS_IN_PAGE)
    232                {
    233                   spare_32 =               (src[SECTOR_SIZE]);
    234                   spare_32 = spare_32<<8 | (src[SECTOR_SIZE+1]);
    235                   spare_32 = spare_32<<8 | (src[SECTOR_SIZE+2]);
    236                   spare_32 = spare_32<<8 | (src[SECTOR_SIZE+3]);
    237          
    238                   spare_data[i] = spare_32;
    239                }
    240          
    241             }
    242          
    243             return STATUS_SUCCESS;
    244          }
    245          
    246          
    247          void NAND_ReceiveBytes(UINT8* data_buffer, UINT8 len)
    248          {
    249             for(int i = 0; i < len; i++ )
    250             {
    251                for(volatile int (a) = 0; (a) < 100; (a)++);
    252          
    253                if (data_buffer != NULL)
    254                {
    255                   data_buffer[i] = (UINT8)(NandReadData & 0x000000FF);
    256                }
    257             }
    258          }
    259          
    260          BOOL NAND_ECCStatus(UINT8* ecc_error_count)
    261          {
    262             /* TODO: get value from register: NandECCErrStatus & NandIRQStatusRaw */
    263             *ecc_error_count = 8;
    264          
    265             return FALSE;
    266          }
    267          
    268          void NAND_WaitRB(NAND_CHIP chip_addr)
    269          {
    270             if (chip_addr == 0)
    271             {
    272                while (!NandIRQStatusRaw_bit.INT28R);
    273             }
    274             else if (chip_addr == 1)
    275             {
    276                while (!NandIRQStatusRaw_bit.INT29R);
    277             }
    278             else if (chip_addr == 2)
    279             {
    280                while (!NandIRQStatusRaw_bit.INT30R);
    281             }
    282             else if (chip_addr == 3)
    283             {
    284                while (!NandIRQStatusRaw_bit.INT31R);
    285             }
    286             else
    287             {
    288                ASSERT(FALSE);
    289             }
    290          }
    291          
    292          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NAND_DeSelectChip
       0   NAND_ECCStatus
       8   NAND_Init
         8   -> CGU_Run_Clock
       8   NAND_ReceiveBytes
      24   NAND_ReceiveData
        24   -> __aeabi_memcpy
       0   NAND_SelectChip
      16   NAND_SendAddr
       0   NAND_SendCMD
      24   NAND_SendData
        24   -> __aeabi_memcpy
        24   -> __aeabi_memset
       4   NAND_WaitRB


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       8  NAND_DeSelectChip
       8  NAND_ECCStatus
     194  NAND_Init
      46  NAND_ReceiveBytes
     216  NAND_ReceiveData
      24  NAND_SelectChip
      60  NAND_SendAddr
      18  NAND_SendCMD
     184  NAND_SendData
      96  NAND_WaitRB
       4  _A_NANDFLASH_CTRL_ECC_RESET_N_SOFT
       4  _A_NANDFLASH_CTRL_NAND_RESET_N_SOFT
       4  _A_NandConfig
       4  _A_NandControlFlow
       4  _A_NandIRQStatusRaw
       4  _A_NandReadData
       4  _A_NandSetAddr
       4  _A_NandSetCE
       4  _A_NandSetCmd
       4  _A_NandTiming1
       4  _A_NandTiming2
       4  _A_SYSCREG_MUX_LCD_EBI_SEL
       4  _A_SYSCREG_MUX_NAND_MCI_SEL

 
  52 bytes in section .noinit (abs)
 930 bytes in section .text
 
 930 bytes of CODE memory
   0 bytes of DATA memory (+ 52 bytes shared)

Errors: none
Warnings: none
