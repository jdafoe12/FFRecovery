###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\buf\buf_api.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\buf\buf_api.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\buf_api.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\buf_api.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\buf\buf_api.c
      1          /*********************************************************
      2           * Module name: buf_api.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Buffer writing sectors in RAM (e.g. FIFO), until
     28           *    enough sectors to write as an MPP (multiple plane
     29           *    page), which can program parallelly. Also force to
     30           *    flush when stop or non-seqential writing happened.
     31           *
     32           *********************************************************/
     33          
     34          #include <core\inc\cmn.h>
     35          #include <core\inc\buf.h>
     36          #include <core\inc\ftl.h>
     37          #include <sys\sys.h>
     38          
     39          #if defined(__ICCARM__)
     40          #include "lpc313x_chip.h"
     41          /* TODO: place pb_pool on both SRAM0 and SRAM1, and so, USB and DMA can
     42           * access SRAM together!. How to make them access buffers on different SRAM?
     43           */
     44          #pragma location = (ISRAM_ESRAM1_BASE-BUFFER_COUNT*sizeof(PAGE_BUFFER)/2)
     45          __no_init
     46          #endif
     47          
     48          static PAGE_BUFFER pb_pool[BUFFER_COUNT];
     49          static BOOL pb_pool_used[BUFFER_COUNT];
     50          static BOOL sector_written[SECTOR_PER_MPP];
     51          static void* write_buffer;
     52          static void* merge_buffer;
     53          static LSADDR buf_start_addr;
     54          static LSADDR buf_end_addr;
     55          
     56          void BUF_Init() {
     57            UINT32 i;
     58          
     59            /* init the rambuffer variables */
     60            buf_start_addr = INVALID_LSADDR;
     61            buf_end_addr = INVALID_LSADDR;
     62          
     63            for (i = 0; i < BUFFER_COUNT; i++) {
     64              pb_pool_used[i] = FALSE;
     65            }
     66          
     67            for (i = 0; i < SECTOR_PER_MPP; i++) {
     68              sector_written[i] = FALSE;
     69            }
     70          
     71            write_buffer = BUF_Allocate();
     72            merge_buffer = NULL;
     73          }
     74          
     75          void BUF_PutSector(LSADDR addr, void* sector) {
     76            ASSERT(write_buffer != NULL);
     77          
     78            if (buf_end_addr == INVALID_LSADDR) {
     79              buf_start_addr = addr & (~(SECTOR_PER_MPP - 1));
     80              buf_end_addr = addr | (SECTOR_PER_MPP - 1);
     81            }
     82          
     83            if (addr >= buf_start_addr && addr <= buf_end_addr) {
     84              /* can put to ram write_buffer */
     85              memcpy(&(((UINT8*) write_buffer)[(addr - buf_start_addr) * SECTOR_SIZE]),
     86                     sector, SECTOR_SIZE);
     87              sector_written[addr - buf_start_addr] = TRUE;
     88            } else {
     89              /* ASSERT: must call flush between two transcation */
     90              ASSERT(FALSE);
     91            }
     92          }
     93          
     94          void BUF_GetPage(PGADDR* addr, void** buffer) {
     95            UINT32 i;
     96            BOOL need_merge = FALSE;
     97            PGADDR page_addr = buf_start_addr >> SECTOR_PER_MPP_SHIFT;
     98            STATUS ret;
     99          
    100            ASSERT(buf_start_addr != INVALID_LSADDR);
    101          
    102            for (i = 0; i < SECTOR_PER_MPP; i++) {
    103              if (sector_written[i] == FALSE) {
    104                need_merge = TRUE;
    105                break;
    106              }
    107            }
    108          
    109            if (need_merge == TRUE) {
    110              ASSERT(merge_buffer == NULL);
    111              merge_buffer = BUF_Allocate();
    112          
    113              /* read back the page and merge with write sectors */
    114              ret = FTL_Read(page_addr, merge_buffer);
    115              if (ret == STATUS_SUCCESS) {
    116                for (i = 0; i < SECTOR_PER_MPP; i++) {
    117                  if (sector_written[i] == TRUE) {
    118                    memcpy(&(((UINT8*) merge_buffer)[i * SECTOR_SIZE]),
    119                           &(((UINT8*) write_buffer)[i * SECTOR_SIZE]), SECTOR_SIZE);
    120                  }
    121                }
    122              }
    123          
    124              BUF_Free(write_buffer);
    125              write_buffer = NULL;
    126              *buffer = merge_buffer;
    127              merge_buffer = NULL;
    128            } else {
    129              *buffer = write_buffer;
    130              /* this write buffer is passed out, and should allocate
    131               * another write buffer.
    132               */
    133              write_buffer = NULL;
    134            }
    135          
    136            /* return the page address */
    137            *addr = page_addr;
    138          
    139            /* prepare buffer for following sector writes */
    140            buf_start_addr = INVALID_LSADDR;
    141            buf_end_addr = INVALID_LSADDR;
    142          
    143            for (i = 0; i < SECTOR_PER_MPP; i++) {
    144              sector_written[i] = FALSE;
    145            }
    146          
    147            if (write_buffer == NULL) {
    148              /* allocate another buffer for write_buffer is freed earlier */
    149              write_buffer = BUF_Allocate();
    150            }
    151          }
    152          
    153          void BUF_Free(void* buffer) {
    154            UINT32 i;
    155          
    156            for (i = 0; i < BUFFER_COUNT; i++) {
    157              if (&((pb_pool[i])[0]) == buffer) {
    158                ASSERT(pb_pool_used[i] != FALSE);
    159                pb_pool_used[i] = FALSE;
    160                break;
    161              }
    162            }
    163          
    164            if (i == BUFFER_COUNT) {
    165              ; /* releasing other memory, no action required */
    166            }
    167          }
    168          
    169          void* BUF_Allocate() {
    170            UINT32 i;
    171            void* ret = NULL;
    172          
    173            /* allocate buffer between IRAM0 and IRAM1 interleavely */
    174            for (i = 0; i < BUFFER_COUNT / 2; i++) {
    175              if (pb_pool_used[i] == FALSE) {
    176                ret = &((pb_pool[i])[0]);
    177                pb_pool_used[i] = TRUE;
    178                break;
    179              }
    180          
    181              if (pb_pool_used[i + BUFFER_COUNT / 2] == FALSE) {
    182                ret = &((pb_pool[i + BUFFER_COUNT / 2])[0]);
    183                pb_pool_used[i + BUFFER_COUNT / 2] = TRUE;
    184                break;
    185              }
    186            }
    187            return ret;
    188          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BUF_Allocate
       4   BUF_Free
      24   BUF_GetPage
        24   -> BUF_Allocate
        24   -> BUF_Free
        24   -> FTL_Read
        24   -> __aeabi_memcpy
       8   BUF_Init
         8   -> BUF_Allocate
      16   BUF_PutSector
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      92  BUF_Allocate
      50  BUF_Free
     240  BUF_GetPage
      74  BUF_Init
     104  BUF_PutSector
       4  buf_end_addr
       4  buf_start_addr
       4  merge_buffer
    8192  pb_pool
      16  pb_pool_used
      16  sector_written
       4  write_buffer

 
    48 bytes in section .bss
 8 192 bytes in section .noinit (abs)
   588 bytes in section .text
 
 588 bytes of CODE memory
  48 bytes of DATA memory (+ 8 192 bytes shared)

Errors: none
Warnings: none
