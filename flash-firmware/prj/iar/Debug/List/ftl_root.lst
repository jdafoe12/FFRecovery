###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_root.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_root.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\ftl_root.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\ftl_root.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_root.c
      1          /*********************************************************
      2           * Module name: ftl_root.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           * Updated by vinay.g.jain@gmail.com
     26           * Module Description:
     27           *    FTL ROOT table: root node of PMT, and journal blocks
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\ubi.h>
     33          
     34          #include <sys\sys.h>
     35          
     36          #include "ftl_inc.h"
     37          
     38          ROOT root_table;
     39          
     40          static LOG_BLOCK root_current_block;
     41          static PAGE_OFF root_current_page;
     42          static UINT32 root_edition;
     43          
     44          static char uart_buf[64];
     45          
     46          STATUS ROOT_Format() {
     47            STATUS ret;
     48          
     49            root_current_block = ROOT_BLOCK0;
     50            root_current_page = 0;
     51            root_edition = 0;
     52          
     53            ret = UBI_Erase(root_current_block, root_current_block);
     54            if (ret == STATUS_SUCCESS) {
     55              /* write to UBI */
     56              ret = ROOT_Commit();
     57            }
     58          
     59            return ret;
     60          }
     61          
     62          STATUS ROOT_Init() {
     63            UINT32 i;
     64            SPARE footprint;
     65            STATUS ret = STATUS_SUCCESS;
     66          
     67            /* choose the latest block */
     68            ret = UBI_Read(ROOT_BLOCK0, 0, &root_table, NULL);
     69            if (ret == STATUS_SUCCESS) {
     70              root_edition = root_table.root_edition;
     71              root_current_block = ROOT_BLOCK0;
     72          
     73              ret = UBI_Read(ROOT_BLOCK1, 0, &root_table, NULL);
     74              if (ret == STATUS_SUCCESS) {
     75                if (root_edition > root_table.root_edition) {
     76                  root_current_block = ROOT_BLOCK0;
     77                } else {
     78                  root_current_block = ROOT_BLOCK1;
     79                }
     80              } else {
     81                root_current_block = ROOT_BLOCK0;
     82              }
     83            } else {
     84              root_current_block = ROOT_BLOCK1;
     85            }
     86          
     87            /* read out the latest valid page */
     88            for (i = 0; i < PAGE_PER_PHY_BLOCK; i++) {
     89              ret = UBI_Read(root_current_block, i, &root_table, footprint);
     90              if (ret != STATUS_SUCCESS || footprint[0] == INVALID_INDEX) {
     91                break;
     92              }
     93            }
     94          
     95            if (i == PAGE_PER_PHY_BLOCK) {
     96              ASSERT(ret == STATUS_SUCCESS);
     97            } else {
     98              ASSERT(ret != STATUS_SUCCESS);
     99              ret = STATUS_SUCCESS;
    100            }
    101          
    102            if (ret == STATUS_SUCCESS) {
    103              //WRONG IMPLEMENTATION -- Did a possible correction -- Vinay Jain
    104              /* read out the valid table */
    105              if (i == 0) {
    106                sprintf(uart_buf, "i == 0 : ASSERT FAIL\n\r");
    107                UartWrite((unsigned char *) uart_buf, strlen(uart_buf));
    108               
    109              }
    110              ret = UBI_Read(root_current_block, i - 1, &root_table, NULL);//减1是因为for循环中最后的i不是目标页号
    111            }
    112          
    113            if (ret == STATUS_SUCCESS) {
    114              root_current_page = i;
    115              root_edition = root_table.root_edition + 1;    
    116              
    117             
    118           
    119              /* skip one page for possible PLR issue */
    120              (void) ROOT_Commit();
    121            }
    122          
    123            return ret;
    124          }
    125          
    126          STATUS ROOT_Commit() {
    127            STATUS ret = STATUS_SUCCESS;
    128            SPARE footprint;
    129            LOG_BLOCK next_block = INVALID_BLOCK;
    130          
    131            if (root_current_page == PAGE_PER_PHY_BLOCK) {
    132              /* write data in another block */
    133              next_block = root_current_block ^ 1;
    134          
    135              /* erase the block before write root */
    136              ret = UBI_Erase(next_block, next_block);
    137              if (ret == STATUS_SUCCESS) {
    138                root_current_page = 0;
    139                root_current_block = next_block;
    140              }
    141            }
    142          
    143            if (ret == STATUS_SUCCESS) {
    144              PM_NODE_SET_BLOCKPAGE(root_table.root_current_journal,root_current_block,root_current_page);
    145              root_table.root_edition = root_edition++;
    146          
    147              footprint[0] = 0;
    148          
    149              /* write ROOT table in ram to UBI */
    150              ret = UBI_Write(root_current_block, root_current_page, &root_table,footprint, FALSE);
    151            }
    152          
    153            if (ret == STATUS_SUCCESS) {
    154             
    155              root_current_page++;
    156            }
    157          
    158            return ret;
    159          }
    160          
    161          
    162          //jsjpenn
    163          STATUS FTL_ROOT_table_store(){
    164            
    165            STATUS ret;
    166            LOG_BLOCK block_to_write=FTL_reserved_START_BLOCK;//54
    167            PAGE_OFF page_to_write=3;//写在第3页
    168            
    169            
    170            ret=UBI_Write(block_to_write, page_to_write, &root_table, NULL, FALSE);
    171            
    172            return ret;
    173          }
    174          
    175          
    176          STATUS FTL_ROOT_table_restore(){  
    177            STATUS ret;
    178            LOG_BLOCK block_to_write=FTL_reserved_START_BLOCK;//54
    179            PAGE_OFF page_to_write=3;//写在第3页  
    180            
    181            
    182            ROOT tem_root_table;
    183            
    184            ret=UBI_Read(block_to_write, page_to_write, &tem_root_table, NULL);
    185            
    186             
    187            root_table.hot_journal[0]=tem_root_table.hot_journal[0];
    188            root_table.cold_journal[0]=tem_root_table.cold_journal[0];
    189            root_table.reclaim_journal[0]=tem_root_table.reclaim_journal[0];
    190            root_table.root_edition=tem_root_table.root_edition;
    191            
    192            //在恢复hdi时更新了hdi_current_journal
    193            //在恢复bdt时更新了bdt_current_journal
    194            //在恢复mapI时更新了pmt_current_block和pmt_reclaim_block，以及page_mapping_nodes[]
    195           if(ret == STATUS_SUCCESS) { 
    196              ret=ROOT_Commit();
    197            
    198           }
    199          
    200            return ret;
    201          }
    202          
    203          STATUS Truly_FTL_ROOT_table_restore(){
    204            STATUS ret= STATUS_SUCCESS;
    205            return ret;
    206          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    2056   FTL_ROOT_table_restore
      2056   -> ROOT_Commit
      2056   -> UBI_Read
       8   FTL_ROOT_table_store
         8   -> UBI_Write
      24   ROOT_Commit
        24   -> UBI_Erase
        24   -> UBI_Write
       8   ROOT_Format
         8   -> ROOT_Commit
         8   -> UBI_Erase
      24   ROOT_Init
        24   -> ROOT_Commit
        24   -> UBI_Read
        24   -> UartWrite
        24   -> sprintf
        24   -> strlen
       0   Truly_FTL_ROOT_table_restore


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
      24  ?_0
      68  FTL_ROOT_table_restore
      24  FTL_ROOT_table_store
     148  ROOT_Commit
      50  ROOT_Format
     258  ROOT_Init
       8  Truly_FTL_ROOT_table_restore
       4  root_current_block
       4  root_current_page
       4  root_edition
    2048  root_table
      64  uart_buf

 
 2 124 bytes in section .bss
    24 bytes in section .rodata
   588 bytes in section .text
 
   588 bytes of CODE  memory
    24 bytes of CONST memory
 2 124 bytes of DATA  memory

Errors: none
Warnings: none
