###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_uart.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_uart.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\drv_uart.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\drv_uart.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\sys\lpc313x\csp\drv_uart.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2009
      6           *
      7           *    File name   : uart.c
      8           *    Description : UARTs module
      9           *
     10           *    History :
     11           *    1. Date        : August 26, 2009
     12           *       Author      : Stanimir Bonev
     13           *       Description : Create
     14           *
     15           *    $Revision: 31493 $
     16           **************************************************************************/
     17          
     18          #define UART_GLOBAL
     19          #include <stdlib.h>
     20          #include "arm_comm.h"
     21          #include "drv_cgu.h"
     22          #include "drv_intc.h"
     23          #include "drv_uart.h"
     24          
     25          pUartFifo_t pUart0RxFifo;  // Pointer to a FIFO Buffer of the UART0 Receive
     26          pUartFifo_t pUart0TxFifo;  // Pointer to a FIFO Buffer of the UART0 Transmit
     27          
     28          // Hold UART0 Evens (PE, BI, FE, OE)
     29          UartLineEvents_t Uart0LineEvents;
     30          
     31          /*************************************************************************
     32           * Function Name: FifoPush
     33           * Parameters: pUartFifo_t Fifo, Int8U Data
     34           *
     35           * Return: Boolean
     36           *
     37           * Description: Push a char in a FIFO. Return TRUE when push is successful
     38           *  or FALSE when the FIFO is full.
     39           *
     40           *************************************************************************/
     41          static Boolean FifoPush(pUartFifo_t Fifo, Int8U Data) {
     42            Int32U IndxTmp;
     43          
     44            // calculate next push index
     45            IndxTmp = Fifo->PushIndx + 1;
     46            IndxTmp = IndxTmp % UART_FIFO_SIZE;
     47          
     48            // Check FIFO state
     49            if (IndxTmp == Fifo->PopIndx) {
     50              // The FIFO is full
     51              return (FALSE);
     52            }
     53            // Push the data
     54            Fifo->Buffer[Fifo->PushIndx] = Data;
     55            // Updating the push's index
     56            Fifo->PushIndx = IndxTmp;
     57            return (TRUE);
     58          }
     59          
     60          /*************************************************************************
     61           * Function Name: FifoPop
     62           * Parameters: pUartFifo_t Fifo, Int8U Data
     63           *
     64           * Return: Boolean
     65           *
     66           * Description: Pop a char from a FIFO. Return TRUE when pop is successful
     67           *  or FALSE when the FIFO is empty.
     68           *
     69           *************************************************************************/
     70          static Boolean FifoPop(pUartFifo_t Fifo, pInt8U pData) {
     71            Int32U IndxTmp;
     72          
     73            // Check FIFO state
     74            if (Fifo->PushIndx == Fifo->PopIndx) {
     75              // The FIFO is empty
     76              return (FALSE);
     77            }
     78            // Calculate the next pop index
     79            IndxTmp = Fifo->PopIndx + 1;
     80            IndxTmp = IndxTmp % UART_FIFO_SIZE;
     81            // Pop the data
     82            *pData = Fifo->Buffer[Fifo->PopIndx];
     83            // Updating of the pop's index
     84            Fifo->PopIndx = IndxTmp;
     85            return (TRUE);
     86          }
     87          
     88          /*************************************************************************
     89           * Function Name: Uart0Isr
     90           * Parameters: none
     91           *
     92           * Return: none
     93           *
     94           * Description: UART 0 interrupt routine
     95           *
     96           *************************************************************************/
     97          static
     98          void Uart0Isr(void) {
     99            Int32U UartIntId = UART_IIR, LineStatus, Counter;
    100            Int8U Data;
    101            // Recognize the interrupt event
    102            switch (UartIntId & 0xF) {
    103              case RLS_INTR_ID:  // Receive Line Status
    104              case CDI_INTR_ID:  // Character Time-out Indicator
    105              case RDA_INTR_ID:  // Receive Data Available
    106                // Read the line state of the UART
    107                LineStatus = UART_LSR;
    108                do {
    109                  if (LineStatus & RLS_OverrunError) {
    110                    // Overrun Error
    111                    Uart0LineEvents.bOE = TRUE;
    112                  }
    113                  Data = UART_RBR;
    114                  if (LineStatus & RLS_BreakInterruptr) {
    115                    // Break Indicator
    116                    Uart0LineEvents.bBI = TRUE;
    117                  } else if (LineStatus & RLS_FramingError) {
    118                    // Framing Error
    119                    Uart0LineEvents.bFE = TRUE;
    120                  } else if (LineStatus & RLS_ParityError) {
    121                    // Parity Error
    122                    Uart0LineEvents.bPE = TRUE;
    123                  }
    124                  // Push a new data into the receiver buffer
    125                  if (!FifoPush(pUart0RxFifo, Data)) {
    126                    // the FIFO is full
    127                    Uart0LineEvents.bOE = TRUE;
    128                    break;
    129                  }
    130                  // Read the line state of the UART
    131                  LineStatus = UART_LSR;
    132                } while (LineStatus & RLS_ReceiverDataReady);  // Is the hardware FIFO is empty?
    133                break;
    134              case THRE_INTR_ID:  // THRE Interrupt
    135                // Tx UART FIFO size - 1
    136                // Fill whole hardware transmit FIFO
    137                for (Counter = 15; Counter; --Counter) {
    138                  // Pop a data from the transmit buffer
    139                  if (!FifoPop(pUart0TxFifo, &Data)) {
    140                    // The tx software FIFO is empty
    141                    break;
    142                  }
    143                  UART_THR = Data;
    144                }
    145                break;
    146            }
    147          }
    148          
    149          /*************************************************************************
    150           * Function Name: UartInit
    151           * Parameters: Int32U IrqPrio
    152           *
    153           * Return: Boolean
    154           *
    155           * Description: Init UART
    156           *
    157           *************************************************************************/
    158          Boolean UartInit(Int32U IrqPrio) {
    159            volatile Int8U Tmp;
    160          
    161            pUart0RxFifo = (pUartFifo_t) malloc(sizeof(UartFifo_t));
    162          
    163            if (pUart0RxFifo == NULL) {
    164              return (FALSE);
    165            }
    166            pUart0TxFifo = (pUartFifo_t) malloc(sizeof(UartFifo_t));
    167            if (pUart0TxFifo == NULL) {
    168              free(pUart0RxFifo);
    169              return (FALSE);
    170            }
    171            // Init receive and transmit FIFOs
    172            pUart0RxFifo->PopIndx = pUart0RxFifo->PushIndx = pUart0TxFifo->PopIndx =
    173                pUart0TxFifo->PushIndx = 0;
    174          
    175            // Enable UART0
    176            CGU_Run_Clock(UART_APB_CLK);
    177            CGU_Run_Clock(UART_U_CLK);
    178          
    179            UART_LCR = 0x03;  // Word Length =8, no parity , 1 stop
    180            UART_FCR = 0x7;  // Enable and Clear the UART0 FIFO, Set RX FIFO interrupt level - 1 char
    181            Tmp = UART_IER;  // Clear pending interrupts
    182            // enable RBR Interrupt, THRE Interrupt, RX Line Status Interrupt
    183            UART_IER = 0x07;
    184          
    185            /*Install Interrupt Service Routine,
    186             Priority 3*/
    187            INTC_IRQInstall(Uart0Isr, IRQ_UART, IrqPrio, 0);
    188            /*Enable Timer 1 interrupt*/
    189            INTC_IntEnable(IRQ_UART, 1);
    190          
    191            return (TRUE);
    192          }
    193          
    194          /*************************************************************************
    195           * Function Name: UartCalcDivider
    196           * Parameters:  Int32U Freq, Int32U Baud
    197           *              pInt32U pDiv, pInt32U pAddDiv, pInt32U pMul
    198           *
    199           * Return: None
    200           *
    201           * Description: Calculate the coefficients of the UART baudrate generator
    202           *
    203           *************************************************************************/
    204          static
    205          void UartCalcDivider(Int32U Freq, Int32U Baud, pInt32U pDiv, pInt32U pAddDiv,
    206                               pInt32U pMul) {
    207            Int32U Temp, Error = (Int32U) -1;
    208            Int32U K1, K2, K3, Baudrate;
    209            Int32U DivTemp, MulTemp, AddDivTemp;
    210          
    211            //
    212            for (MulTemp = 1; MulTemp < 16; ++MulTemp) {
    213              K1 = Freq * MulTemp;
    214              for (AddDivTemp = 1; AddDivTemp < 16; ++AddDivTemp) {
    215                K3 = (MulTemp + AddDivTemp) << 4;
    216                K2 = K3 * Baud;
    217                DivTemp = K1 / K2;
    218                // if DIVADDVAL>0, UnDL must be UnDL >= 0x0002 or the UART will
    219                // not operate at the desired baud-rate!
    220                if (DivTemp < 2) {
    221                  continue;
    222                }
    223                Baudrate = DivTemp * K3;
    224                Baudrate = K1 / Baudrate;
    225                Temp = (Baudrate > Baud) ? (Baudrate - Baud) : (Baud - Baudrate);
    226                if (Temp < Error) {
    227                  Error = Temp;
    228                  *pDiv = DivTemp;
    229                  *pMul = MulTemp;
    230                  *pAddDiv = AddDivTemp;
    231                  if (Error == 0) {
    232                    return;
    233                  }
    234                }
    235              }
    236            }
    237          }
    238          
    239          /*************************************************************************
    240           * Function Name: UartSetLineCoding
    241           * Parameters:  UartLineCoding_t pUartCoding
    242           *
    243           * Return: None
    244           *
    245           * Description: Init UART Baud rate, Word width, Stop bits, Parity type
    246           *
    247           *************************************************************************/
    248          void UartSetLineCoding(UartLineCoding_t UartCoding) {
    249            Int32U Mul, Div, AddDiv, Freq;
    250          
    251            // Check parameters
    252            if ((UartCoding.dwDTERate == 0)
    253                || (UartCoding.dwDTERate > UART_MAX_BAUD_RATE)) {
    254              return;
    255            }
    256          
    257            Freq = (12ulMHZ);
    258            UartCalcDivider(Freq, UartCoding.dwDTERate, &Div, &AddDiv, &Mul);
    259            UART_LCR_bit.WdLenSel = UartCoding.bDataBits;
    260            UART_LCR_bit.StopBitNum = UartCoding.bStopBitsFormat;
    261            UART_LCR_bit.ParEn = (UartCoding.bParityType == UART_NO_PARITY) ? 0 : 1;
    262            UART_LCR_bit.ParEven = UartCoding.bParityType & 1;
    263            UART_LCR_bit.ParStick = (UartCoding.bParityType >> 1) & 1;
    264            UART_LCR_bit.DLAB = 1;
    265            UART_DLL = Div & 0xFF;
    266            UART_DLM = (Div >> 8) & 0xFF;
    267            UART_FDR = AddDiv + (Mul << 4);
    268            UART_LCR_bit.DLAB = 0;
    269          }
    270          
    271          /*************************************************************************
    272           * Function Name: UartRead
    273           * Parameters:  pInt8U pBuffer, Int32U BufferSize
    274           *
    275           * Return: Int32U
    276           *
    277           * Description: Read received data from UART.
    278           *              Return number of readied characters
    279           *
    280           *************************************************************************/
    281          Int32U UartRead(pInt8U pBuffer, Int32U BufferSize) {
    282            Int32U Count;
    283            pUartFifo_t pUartFifo;
    284          
    285            pUartFifo = pUart0RxFifo;
    286          
    287            for (Count = 0; Count < BufferSize; ++Count) {
    288              if (!FifoPop(pUartFifo, pBuffer + Count)) {
    289                break;
    290              }
    291            }
    292            return (Count);
    293          }
    294          
    295          /*************************************************************************
    296           * Function Name: UartWrite
    297           * Parameters:  pInt8U pBuffer, Int32U BufferSize
    298           *
    299           * Return: Int32U
    300           *
    301           * Description: Write a data to UART. Return number of successful
    302           *  transmitted bytes
    303           *
    304           *************************************************************************/
    305          Int32U UartWrite(pInt8U pBuffer, Int32U BufferSize) {
    306            Int32U Count = 0;
    307            pUartFifo_t pUartFifo;
    308            Int32U save;
    309          
    310            pUartFifo = pUart0TxFifo;
    311          
    312            while (Count != BufferSize) {
    313              volatile pInt8U pUartTxReg;
    314              save = __get_interrupt_state();
    315              __disable_interrupt();
    316              if ((pUartFifo->PushIndx == pUartFifo->PopIndx)) {
    317                // The Tx FIFO is empty
    318                pUartTxReg = (pInt8U) &UART_THR;
    319                if (UART_LSR_bit.THRE) {
    320                  *pUartTxReg = *(pBuffer + Count);
    321                  ++Count;
    322                }
    323              }
    324              /*
    325               for ( ; Count < BufferSize; ++Count)
    326               {
    327               if(!FifoPush(pUartFifo,*(pBuffer+Count)))
    328               {
    329               break;
    330               }
    331               }
    332               */
    333              __set_interrupt_state(save);
    334            }
    335            return (Count);
    336          }
    337          
    338          /*************************************************************************
    339           * Function Name: UartGetUartEvents
    340           * Parameters:
    341           *
    342           * Return: UartLineEvents_t
    343           *
    344           * Description: Get Uart Line events (PE,OE, FE, BI)
    345           *
    346           *************************************************************************/
    347          UartLineEvents_t UartGetUartLineEvents(void)
    348          
    349          {
    350            UartLineEvents_t LineEvents;
    351          
    352            LineEvents.Data = 0;
    353          
    354            AtomicExchange(LineEvents.Data, &Uart0LineEvents.Data);
    355          
    356            return (LineEvents);
    357          }
    358          
    359          /*************************************************************************
    360           * Function Name: UartSetUartLineState
    361           * Parameters:  Boolean Break
    362           *
    363           * Return: none
    364           *
    365           * Description: Set Uart Break Event
    366           *
    367           *************************************************************************/
    368          void UartSetUartLineState(Boolean Break) {
    369            UART_LCR_bit.BrkCtrl = Break;
    370          }
    371          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AtomicExchange
      12   FifoPop
        12 __aeabi_uidivmod
      12   FifoPush
        12 __aeabi_uidivmod
      16   Uart0Isr
        16   -> FifoPop
        16   -> FifoPush
      44   UartCalcDivider
        44 __aeabi_uidiv
       8   UartGetUartLineEvents
         8   -> AtomicExchange
      16   UartInit
        16   -> CGU_Run_Clock
        16   -> INTC_IRQInstall
        16   -> INTC_IntEnable
        16   -> free
        16   -> malloc
      24   UartRead
        24   -> FifoPop
      32   UartSetLineCoding
        32   -> UartCalcDivider
       0   UartSetUartLineState
      20   UartWrite
        20 __iar_disable_interrupt
        20 __iar_get_interrupt_state
        20 __iar_set_interrupt_state


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       8  AtomicExchange
      44  FifoPop
      40  FifoPush
       1  UART_RBR
     182  Uart0Isr
       4  Uart0LineEvents
     114  UartCalcDivider
      16  UartGetUartLineEvents
     146  UartInit
      36  UartRead
     232  UartSetLineCoding
      22  UartSetUartLineState
      66  UartWrite
       4  _A_UART_FDR
       4  _A_UART_IER
       4  _A_UART_IIR
       4  _A_UART_LCR
       4  _A_UART_LSR
       4  pUart0RxFifo
       4  pUart0TxFifo
     512  s
      48  -- Other

 
   524 bytes in section .bss
    21 bytes in section .noinit (abs)
 1 014 bytes in section .text
 
 958 bytes of CODE memory (+ 56 bytes shared)
 524 bytes of DATA memory (+ 21 bytes shared)

Errors: none
Warnings: none
