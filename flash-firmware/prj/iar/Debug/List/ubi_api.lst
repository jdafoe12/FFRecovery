###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ubi\ubi_api.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ubi\ubi_api.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\ubi_api.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\ubi_api.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ubi\ubi_api.c
      1          /*********************************************************
      2           * Module name: ubi_api.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Unsorted Block Image.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\mtd.h>
     33          #include <core\inc\ubi.h>
     34          #include <core\inc\buf.h>
     35          #include <sys\sys.h>
     36          #include "ubi_inc.h"
     37          
     38          /* NOTICE:
     39           * PHY_BLOCK place die (channel/chip/die) index in low bits,
     40           * one PHY_BLOCK combines blocks in multiple planes.
     41           */
     42          
     43          typedef struct {
     44            LOG_BLOCK log_block;
     45            PHY_BLOCK phy_block; /* INVALID_BLOCK for empty slot */
     46            ERASE_COUNT ec;
     47            PAGE_OFF page;
     48            void* buffer;
     49            SPARE spare;
     50          } DIE_HOLD_PAGE;
     51          
     52          static DIE_HOLD_PAGE dice_hold[TOTAL_DIE_COUNT];
     53          static UINT8 tmp_data_buffer[MPP_SIZE];
     54          
     55          static STATUS ubi_reclaim_badblock(LOG_BLOCK log_block, PHY_BLOCK phy_block,
     56                                             ERASE_COUNT phy_block_ec, PAGE_OFF bad_page,
     57                                             PHY_BLOCK* new_phy_block,
     58                                             ERASE_COUNT* new_ec);
     59          
     60          static UINT32 ubi_find_die_buffer(PHY_BLOCK block);
     61          
     62          STATUS UBI_Format() {
     63            AREA area = 0;
     64            PHY_BLOCK block_count;
     65            PHY_BLOCK remaining_count;
     66            PHY_BLOCK total_data_block = 0;
     67            PHY_BLOCK fmt_current_block = DATA_FIRST_BLOCK;//7
     68            STATUS ret = STATUS_SUCCESS;  
     69            //jsj增加,先不执行，不用每次都重建坏块表  
     70            ANCHOR_Format_Clean();//先擦除6个anchor 块
     71            /* try to read out only the anchor table first for bad block table */
     72            ret = ANCHOR_Init();
     73            //擦除6个anchor块后将导致每次上电都读anchor table失败
     74            //如果读anchor table失败，会重新扫描所有物理块，建立坏块表
     75            if (ret != STATUS_SUCCESS) {
     76              int bad_blk=0;
     77              PHY_BLOCK block;
     78              uart_printf("%s:Scan bad block start\r\n",__func__);
     79              /* detect bad block and build up the bad block table */
     80              //jsjpennn
     81              //todo:为了存code 从PEB 1开始擦，不擦PEB 0??
     82              for (block = 0; block < CFG_LOG_BLOCK_COUNT; block++) {     
     83                
     84                //jsj修改扫描坏块方式      
     85                ret = MTD_Erase(block);
     86                if (ret != STATUS_BADBLOCK) 
     87                {
     88                  ret = MTD_CheckBlock(block);        
     89                }
     90                if (ret == STATUS_BADBLOCK)
     91                {
     92                  bad_blk++;
     93                  uart_printf("%s: Find a bad block: %d-Bad block at PEB %u\n", __func__, bad_blk, block);
     94                  ANCHOR_LogBadBlock(block);//PEB2782是坏块
     95                }    
     96              }
     97            }  
     98              
     99            do {
    100              ASSERT(fmt_current_block < DATA_BLOCK_COUNT);    
    101              //jsj修改
    102              remaining_count = (DATA_BLOCK_COUNT+DATA_FIRST_BLOCK) - fmt_current_block;
    103              block_count = MIN(remaining_count, CFG_PHY_BLOCK_PER_AREA); 
    104              
    105              /* formatting area */
    106              fmt_current_block = AREA_Format(block_count, fmt_current_block, area);
    107              if (fmt_current_block != INVALID_BLOCK) {
    108                area++;
    109                /* TODO: consider bad block. Count read total_data_block in AREA_Format. */
    110                total_data_block += block_count;
    111              } else {
    112                break;
    113              }
    114            } while (fmt_current_block < DATA_BLOCK_COUNT);
    115           
    116            if (fmt_current_block != INVALID_BLOCK) {
    117              //已在INDEX_Format()中 保证Index block是好块    
    118              /* formatting index */    
    119              fmt_current_block = INDEX_Format(CFG_LOG_BLOCK_COUNT, fmt_current_block);
    120            }
    121          
    122            if (fmt_current_block != INVALID_BLOCK) {
    123              ASSERT(fmt_current_block == CFG_LOG_BLOCK_COUNT);
    124              /* formatting anchor */
    125              ret = ANCHOR_Format(total_data_block);
    126            } else {
    127              /* write anchor table to log bad block table */
    128              (void) ANCHOR_Format(INVALID_BLOCK);
    129              ret = STATUS_UBI_FORMAT_ERROR;
    130            }  
    131            return ret;
    132          }
    133          
    134          STATUS UBI_Init() {
    135            AREA area;
    136            AREA updating_area;
    137            UINT32 die;
    138            PHY_BLOCK updating_logical_block = INVALID_BLOCK;
    139            PHY_BLOCK updating_origin_block = INVALID_BLOCK;
    140            ERASE_COUNT updating_block_ec = INVALID_EC;
    141            STATUS ret;
    142          
    143            ret = ANCHOR_Init();
    144            if (ret == STATUS_SUCCESS) {
    145              /* init/plr index table, and get the plr info of area update */
    146              ret = INDEX_Init(&updating_logical_block, &updating_origin_block,
    147                               &updating_block_ec);     
    148            }
    149           
    150            if (ret == STATUS_SUCCESS) {
    151              /* find the updating area */
    152              if (updating_logical_block != INVALID_BLOCK) {
    153                updating_area = AREA_INDEX(updating_logical_block);
    154              } else {
    155                updating_area = INVALID_AREA;
    156              }
    157              for (area = 0; area < AREA_COUNT; area++) {
    158                /* read out the area table, and setup the area offset table */
    159                ret = AREA_Init(area);
    160                if (ret == STATUS_SUCCESS) {
    161                  if (area == updating_area) {
    162                    /* check the data of the area for PLR */          
    163                    uart_printf("**%s**:updating_area=%d\r\n", __func__,updating_area);          
    164                    if (AREA_CheckUpdatePLR(updating_logical_block, updating_origin_block,updating_block_ec) == TRUE) {
    165                      /* continue to update the area table */            
    166                        INDEX_Update_AreaUpdate(updating_logical_block, updating_origin_block, updating_block_ec);            
    167                        uart_printf("**%s**: Warning-INDEX_Update_Commit() is called and may change MAPII\r\n", __func__); //jsjpenn注意：可能会修改MAP II            
    168                        ret = INDEX_Update_Commit();            
    169                    }
    170                  }
    171                } else {
    172                  break;
    173                }
    174              }
    175            }
    176            if (ret == STATUS_SUCCESS) {
    177              for (die = 0; die < TOTAL_DIE_COUNT; die++) {
    178                dice_hold[die].phy_block = INVALID_BLOCK;
    179              }
    180            }
    181            return ret;
    182          }
    183          
    184          STATUS UBI_Read(LOG_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare) {
    185            PHY_BLOCK phy_block;
    186            STATUS ret = STATUS_SUCCESS;
    187          
    188            if (block != INVALID_BLOCK && page != INVALID_PAGE) {
    189                
    190              phy_block = AREA_GetBlock(block); //由LEB得到PEB
    191              //uart_printf("Read PHY BLOCK: %d\n", phy_block);
    192              
    193              ASSERT(phy_block != INVALID_BLOCK);
    194              /* TODO: handle the read fail issue, or ECC danger issue */
    195              ret = MTD_Read(phy_block, page, buffer, spare);
    196            } else {
    197              ASSERT(block == INVALID_BLOCK && page == INVALID_PAGE);
    198              /* read from invalid page, fill the empty buffer all ZERO */
    199              memset(buffer, 0, MPP_SIZE);
    200            }
    201            return ret;
    202          }
    203          
    204          STATUS UBI_Write(LOG_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare,BOOL async) {
    205            ERASE_COUNT phy_block_ec;
    206            ERASE_COUNT new_ec;
    207            PHY_BLOCK phy_block;
    208            PHY_BLOCK new_phy_block = INVALID_BLOCK;
    209            STATUS ret;
    210            UINT32 die_index = 0;
    211            
    212            //逻辑II块号所对应的物理块号及其擦除次数
    213            if(ftl_read_state == 1) {
    214              ftl_read_state = 0;
    215              phy_block = AREA_GetBlock(block); 
    216              phy_block_ec = AREA_GetEC(block);
    217              ftl_read_state = 1;
    218            }
    219            else {
    220              phy_block = AREA_GetBlock(block); 
    221              phy_block_ec = AREA_GetEC(block);
    222            }
    223            ASSERT(phy_block != INVALID_BLOCK);
    224           
    225            
    226            
    227            /* check the last page status on the same die */
    228            ret = MTD_WaitReady(phy_block);
    229            while (ret == STATUS_BADBLOCK) {
    230              /* find the buffer in the same die */
    231              die_index = ubi_find_die_buffer(phy_block);
    232          
    233              ASSERT(dice_hold[die_index].phy_block != INVALID_BLOCK);
    234          
    235              /* reclaim earlier pages */
    236              ret = ubi_reclaim_badblock(dice_hold[die_index].log_block,
    237                                         dice_hold[die_index].phy_block,
    238                                         dice_hold[die_index].ec,
    239                                         dice_hold[die_index].page, &new_phy_block,
    240                                         &new_ec);
    241              if (ret == STATUS_SUCCESS && dice_hold[die_index].phy_block != INVALID_BLOCK) {
    242                dice_hold[die_index].phy_block = new_phy_block;
    243                dice_hold[die_index].ec = new_ec;
    244                /* write last page in die buffer */
    245                //jsj 下面写的应是坏块中坏页的内容
    246                ret = MTD_Program(new_phy_block, dice_hold[die_index].page,
    247                                  dice_hold[die_index].buffer,
    248                                  dice_hold[die_index].spare);
    249              }
    250              if (ret == STATUS_SUCCESS) {
    251                ret = MTD_WaitReady(new_phy_block);
    252                
    253              }
    254            }
    255          
    256            if (ret == STATUS_SUCCESS && dice_hold[die_index].phy_block != INVALID_BLOCK) {
    257              ASSERT(dice_hold[die_index].buffer != NULL);
    258          
    259              /* release the die buffer */
    260              BUF_Free(dice_hold[die_index].buffer);
    261              dice_hold[die_index].buffer = NULL;
    262              dice_hold[die_index].phy_block = INVALID_BLOCK;
    263            }
    264              
    265            if (ret == STATUS_SUCCESS && page != INVALID_PAGE) {
    266              ASSERT(buffer != NULL);
    267              /* write current page */
    268              ret = MTD_Program(phy_block, page, buffer, spare);
    269            }
    270          
    271            if (ret == STATUS_SUCCESS && page != INVALID_PAGE) {
    272              ASSERT(buffer != NULL);
    273              if (async == FALSE) {
    274                ret = MTD_WaitReady(phy_block);
    275                while (ret == STATUS_BADBLOCK) {
    276                  ret = ubi_reclaim_badblock(block, phy_block, phy_block_ec, page,
    277                                             &new_phy_block, &new_ec);
    278                  if (ret == STATUS_SUCCESS) {
    279                    /* write last page in die buffer */
    280                    ret = MTD_Program(new_phy_block, page, buffer, spare);
    281                  }
    282          
    283                  if (ret == STATUS_SUCCESS) {
    284                    ret = MTD_WaitReady(new_phy_block);
    285                    // Bo: I suspect the following while loop has some bugs when the SSD needs to reclaim bad blocks mutiple times. 
    286                    // a correct way should update the old phy_block with the new_phy_block during each loop
    287                    // the following lines added by Bo to fix the bug
    288                    phy_block = new_phy_block;
    289                    phy_block_ec = new_ec;
    290                  }
    291                }
    292                ASSERT(ret == STATUS_SUCCESS);
    293                BUF_Free(buffer);
    294              } else {
    295                /* save in dice_hold */
    296                dice_hold[die_index].log_block = block;
    297                dice_hold[die_index].phy_block = phy_block;
    298                dice_hold[die_index].ec = phy_block_ec;
    299                dice_hold[die_index].page = page;
    300                dice_hold[die_index].buffer = buffer;
    301                dice_hold[die_index].spare[0] = spare[0];
    302                dice_hold[die_index].spare[1] = spare[1];
    303              }
    304            }
    305            return ret;
    306          }
    307          
    308          STATUS UBI_Flush() {
    309            UINT32 i;
    310            STATUS ret = STATUS_SUCCESS;
    311          
    312            for (i = 0; i < TOTAL_DIE_COUNT; i++) {//1
    313              if (ret == STATUS_SUCCESS) {
    314                /* check the status of a write buffer in one die */
    315                ret = UBI_Write(dice_hold[i].log_block, INVALID_PAGE, NULL, NULL, TRUE);
    316              }
    317            }
    318          
    319            return ret;
    320          }
    321          
    322          STATUS UBI_Erase(LOG_BLOCK block, LOG_BLOCK die_index) {
    323            //uart_printf("UBI_ERASE log block %d\n", block);
    324            STATUS ret = STATUS_SUCCESS;
    325           
    326            //jsjpenn 
    327            PHY_BLOCK PEB_block;   
    328            PEB_block=AREA_GetBlock(block); //对应物理块号  
    329            //直接执行物理擦除，不修改MAPII    
    330            ret=MTD_Erase(PEB_block);
    331            if (ret !=STATUS_SUCCESS) {
    332              uart_printf("**%s**:Error at erase LEB %d  PEB %d,need to do bad block management\r\n", __func__,block,PEB_block);
    333              
    334              ANCHOR_LogBadBlock(PEB_block);
    335              //修改MAPII
    336              //从FBT中获得一个新的PEB，已在MTD_Erase()中保证返回的不是ValidPEB表中的块
    337              PHY_BLOCK new_block;
    338              ERASE_COUNT new_peb_ec;
    339              ret = INDEX_FreeBlock_Get(PEB_block, &new_block, &new_peb_ec);        
    340              if (ret == STATUS_SUCCESS) {
    341                INDEX_Update_AreaUpdate(block, new_block, new_peb_ec);
    342                ret = INDEX_Update_Commit();//更新MAPII=area table，index table和anchor table
    343                if(ret==STATUS_SUCCESS){
    344                 uart_printf("*%s*:Bad block maagement done and Modify MAPII ok\r\n", __func__);
    345                }        
    346              }      
    347            }    
    348             
    349            return ret;
    350          }
    351          
    352          STATUS UBI_SWL() {
    353            uart_printf("UBI SWL!!!!!!\n");
    354            BLOCK_OFF min_block_offset;
    355            PHY_BLOCK min_physical_block;
    356            ERASE_COUNT min_block_ec;
    357            PHY_BLOCK max_physical_block;
    358            ERASE_COUNT max_block_ec;
    359            PHY_BLOCK logical_block;
    360            PAGE_OFF i;
    361            STATUS ret = STATUS_SUCCESS;
    362            SPARE spare;
    363          
    364            /* static wear leveling (SWL):
    365             * pooling one area, and get the block with min EC in the area,
    366             * exchange it with the max EC block in FBT, if their EC
    367             * difference is larger than a threshold.*/
    368            //用（N:空闲块表擦除次数最大的块）替换掉（M:area正使用块中擦除次数最小的块）
    369            //因为M中的数据一般就是cold数据，可以转存到擦除较大的块中。  
    370            min_block_offset = AREA_FindMinECBlock(anchor_table.swl_current_area,
    371                                                   &min_physical_block, &min_block_ec);
    372            INDEX_FreeBlock_GetMaxECBlock(&max_physical_block, &max_block_ec);
    373          
    374            /* check if SWL is required */
    375            if (max_physical_block != min_physical_block&& max_physical_block != INVALID_BLOCK
    376                && min_physical_block != INVALID_BLOCK && max_block_ec != INVALID_EC
    377                && min_block_ec != INVALID_EC && max_block_ec > min_block_ec
    378                && max_block_ec - min_block_ec > STATIC_WL_THRESHOLD) {
    379          
    380              /* erase the new max-ec-block first */
    381              ret = MTD_Erase(max_physical_block);//使用均衡中真正擦除FBT中返回的EC最大的块
    382          
    383              /* copy data from min ec block to max ec block. */
    384              for (i = 0; i < PAGE_PER_PHY_BLOCK; i++) {
    385                if (ret == STATUS_SUCCESS) {
    386                  /* may read erased page, so acceptable error happen */
    387                  (void) MTD_Read(min_physical_block, i, tmp_data_buffer, spare);
    388                  ret = MTD_Program(max_physical_block, i, tmp_data_buffer, spare);
    389                }
    390          
    391                if (ret == STATUS_SUCCESS) {
    392                  ret = MTD_WaitReady(max_physical_block);
    393                }
    394          
    395                if (ret != STATUS_SUCCESS) {
    396                  /* SWL fail, area table and free table are no changed,
    397                   * so, nothing to do to recover.
    398                   */
    399                  break;
    400                }
    401              }
    402          
    403              if (ret == STATUS_SUCCESS) {
    404                ASSERT(i == PAGE_PER_PHY_BLOCK);
    405                /* UPDATE area table. no need to touch cache block even exists */
    406                logical_block = ((anchor_table.swl_current_area) * CFG_PHY_BLOCK_PER_AREA) + min_block_offset;
    407                INDEX_Update_AreaUpdate(logical_block, max_physical_block, max_block_ec);
    408          
    409                /* update the free block table */
    410                INDEX_FreeBlock_SwapMaxECBlock(min_physical_block, min_block_ec);
    411          
    412                /* update index table (free block, and area index table if need) and
    413                 * area table at once.
    414                 */
    415                ret = INDEX_Update_Commit();
    416              }
    417            } else {
    418              /* do SWL in next area in the next cycle */
    419              anchor_table.swl_current_area = (anchor_table.swl_current_area + 1) % AREA_COUNT;
    420            }
    421            return ret;
    422          }
    423          
    424          STATUS UBI_ReadStatus(LOG_BLOCK block) {
    425            /* when choose journal blocks, erase free blocks, and choose other
    426             * blocks in different dice through calling this function to get
    427             * the status of nand dice.
    428             *
    429             * when writing journal blocks, write data to on block, and write other
    430             * data to different blocks in different dice through calling this function
    431             * to get the status of block programming, then achieve intereleave
    432             * programming across all dice.
    433             */
    434            PHY_BLOCK phy_block;
    435            STATUS ret = STATUS_SUCCESS;
    436          
    437            phy_block = AREA_GetBlock(block);
    438            ASSERT(phy_block != INVALID_BLOCK);
    439          
    440            ret = MTD_ReadStatus(phy_block);
    441          
    442            return ret;
    443          }
    444          
    445          static STATUS ubi_reclaim_badblock(LOG_BLOCK log_block, PHY_BLOCK phy_block,
    446                                             ERASE_COUNT phy_block_ec, PAGE_OFF bad_page,
    447                                             PHY_BLOCK* new_phy_block,
    448                                             ERASE_COUNT* new_phy_ec) {
    449            uart_printf("UBI_RECLAIM??\n");
    450            PHY_BLOCK new_block;
    451            ERASE_COUNT new_ec;
    452            PAGE_OFF i;
    453            STATUS ret = STATUS_SUCCESS;
    454            SPARE spare;
    455          
    456            /* Reclaim Bad Block:
    457             * - get another free block, if none, return fail
    458             * - reclaim bad block, copying 0~page-1
    459             * - add bad block to free block table, with ec+100.*/
    460          
    461            if (ret == STATUS_SUCCESS) {
    462              ret = INDEX_FreeBlock_Get(phy_block, &new_block, &new_ec);
    463            }
    464          
    465            if (ret == STATUS_SUCCESS) {
    466              /* copy pages */
    467              for (i = 0; i < bad_page; i++) {
    468                if (ret == STATUS_SUCCESS) {
    469                  (void) MTD_Read(phy_block, i, tmp_data_buffer, spare);
    470                  ret = MTD_Program(new_block, i, tmp_data_buffer, spare);
    471                }
    472          
    473                if (ret == STATUS_SUCCESS) {
    474                  ret = MTD_WaitReady(new_block);
    475                }
    476          
    477                if (ret != STATUS_SUCCESS) {
    478                  break;
    479                }
    480              }
    481            }
    482          
    483            if (ret == STATUS_SUCCESS) {
    484              /* put back bad block to free blocks with a higher ec to prevent
    485               * using soon. The block will be discarded only when erase failed.
    486               */
    487              INDEX_FreeBlock_Put(phy_block, phy_block_ec + STATIC_WL_THRESHOLD);
    488              INDEX_Update_AreaUpdate(log_block, new_block, new_ec);
    489              ret = INDEX_Update_Commit();
    490            }
    491          
    492            if (ret == STATUS_SUCCESS) {
    493              *new_phy_block = new_block;
    494              *new_phy_ec = new_ec;
    495            } else {
    496              *new_phy_block = INVALID_BLOCK;
    497              *new_phy_ec = INVALID_EC;
    498            }
    499          
    500            return ret;
    501          }
    502          
    503          static UINT32 ubi_find_die_buffer(PHY_BLOCK block) {
    504            UINT32 i;
    505            UINT32 die_index = block >> BLOCK_PER_PLANE_SHIFT;
    506          
    507            for (i = 0; i < TOTAL_DIE_COUNT; i++) {
    508              if ((dice_hold[i].phy_block) != INVALID_BLOCK
    509                  && ((dice_hold[i].phy_block) >> BLOCK_PER_PLANE_SHIFT) == die_index) {
    510                break;
    511              }
    512            }
    513            ASSERT(i != TOTAL_DIE_COUNT);
    514            return i;
    515          }
    516          
    517          
    518          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   UBI_Erase
        24   -> ANCHOR_LogBadBlock
        24   -> AREA_GetBlock
        24   -> INDEX_FreeBlock_Get
        24   -> INDEX_Update_AreaUpdate
        24   -> INDEX_Update_Commit
        24   -> MTD_Erase
        24   -> uart_printf
      16   UBI_Flush
        16   -> UBI_Write
      24   UBI_Format
        24   -> ANCHOR_Format
        24   -> ANCHOR_Format_Clean
        24   -> ANCHOR_Init
        24   -> ANCHOR_LogBadBlock
        24   -> AREA_Format
        24   -> INDEX_Format
        24   -> MTD_CheckBlock
        24   -> MTD_Erase
        24   -> uart_printf
      32   UBI_Init
        32   -> ANCHOR_Init
        32   -> AREA_CheckUpdatePLR
        32   -> AREA_Init
        32   -> INDEX_Init
        32   -> INDEX_Update_AreaUpdate
        32   -> INDEX_Update_Commit
        32   -> uart_printf
      24   UBI_Read
        24   -> AREA_GetBlock
        24   -> MTD_Read
        24   -> __aeabi_memset
       8   UBI_ReadStatus
         8   -> AREA_GetBlock
         8   -> MTD_ReadStatus
      40   UBI_SWL
        40   -> AREA_FindMinECBlock
        40   -> INDEX_FreeBlock_GetMaxECBlock
        40   -> INDEX_FreeBlock_SwapMaxECBlock
        40   -> INDEX_Update_AreaUpdate
        40   -> INDEX_Update_Commit
        40   -> MTD_Erase
        40   -> MTD_Program
        40   -> MTD_Read
        40   -> MTD_WaitReady
        40   -> uart_printf
        40 __aeabi_uidivmod
      56   UBI_Write
        56   -> AREA_GetBlock
        56   -> AREA_GetEC
        56   -> BUF_Free
        56   -> MTD_Program
        56   -> MTD_WaitReady
        56   -> ubi_find_die_buffer
        56   -> ubi_reclaim_badblock
      40   printint
        40   -> UartWrite
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      56   printuint
        56   -> UartWrite
        56 __aeabi_uidiv
        56 __aeabi_uidivmod
      40   uart_printf
        40   -> UartWrite
        40   -> printint
        40   -> printuint
       4   ubi_find_die_buffer
      40   ubi_reclaim_badblock
        40   -> INDEX_FreeBlock_Get
        40   -> INDEX_FreeBlock_Put
        40   -> INDEX_Update_AreaUpdate
        40   -> INDEX_Update_Commit
        40   -> MTD_Program
        40   -> MTD_Read
        40   -> MTD_WaitReady
        40   -> uart_printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable3
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable7
       8  ?_0
      28  ?_1
      48  ?_2
      28  ?_3
      72  ?_4
      72  ?_5
      52  ?_6
      16  ?_7
      16  ?_8
     108  UBI_Erase
      52  UBI_Flush
     214  UBI_Format
     196  UBI_Init
     102  UBI_Read
      30  UBI_ReadStatus
     252  UBI_SWL
     612  UBI_Write
      28  dice_hold
      20  digits
      20  digits
     104  printint
      64  printuint
    2048  tmp_data_buffer
     210  uart_printf
      54  ubi_find_die_buffer
     184  ubi_reclaim_badblock
      36  -- Other

 
 2 076 bytes in section .bss
    40 bytes in section .data
   376 bytes in section .rodata
 2 270 bytes in section .text
 
 2 270 bytes of CODE  memory
   376 bytes of CONST memory
 2 116 bytes of DATA  memory

Errors: none
Warnings: none
