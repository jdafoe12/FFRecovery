###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_data.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_data.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\ftl_data.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\ftl_data.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\ftl\ftl_data.c
      1          /*********************************************************
      2           * Module name: ftl_data.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    data journal read/write.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\buf.h>
     33          #include <core\inc\ubi.h>
     34          #include <sys\sys.h>
     35          #include "ftl_inc.h"
     36          
     37          /* journal edition for orderly replay */
     38          static UINT32 edition_in_hot_journal = 0;
     39          static UINT32 edition_in_cold_journal = 0;
     40          
     41          /* meta data */
     42          static SPARE hot_meta_data[JOURNAL_BLOCK_COUNT][PAGE_PER_PHY_BLOCK];
     43          static SPARE cold_meta_data[JOURNAL_BLOCK_COUNT][PAGE_PER_PHY_BLOCK];
     44          
     45          /* buffer used in reclaim */
     46          static SPARE pages_buffer[MPP_SIZE / sizeof(SPARE)];
     47          static UINT8 data_buffer[MPP_SIZE];
     48          static LOG_BLOCK dirty_blocks[JOURNAL_BLOCK_COUNT];
     49          
     50          
     51          
     52          STATUS DATA_Format() {
     53            UINT32 i;
     54            LOG_BLOCK block = DATA_START_BLOCK;//56
     55            STATUS ret = STATUS_SUCCESS;
     56          
     57            /* init the bdt to all dirty */
     58            //在BDT中把所有4096个LEB块都标记为脏，即所有块的invalid页都为63
     59            for (i = 0; i < CFG_LOG_BLOCK_COUNT; i++) {
     60              block_dirty_table[i] = MAX_DIRTY_PAGES;
     61            }
     62          
     63            /* init the journal blocks in root table */
     64            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
     65              if (ret == STATUS_SUCCESS) {
     66                ret = UBI_Erase(block, block);//擦除data block区第一个块56
     67              }
     68          
     69              if (ret == STATUS_SUCCESS) {
     70                PM_NODE_SET_BLOCKPAGE(root_table.hot_journal[i], block, 0);//设置root table
     71                block_dirty_table[block] = 0;//将data block区第一个块标记为净，即invalid页为0
     72                block++;
     73              }
     74            }
     75          
     76            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
     77              if (ret == STATUS_SUCCESS) {
     78                ret = UBI_Erase(block, block);
     79              }
     80          
     81              if (ret == STATUS_SUCCESS) {
     82                PM_NODE_SET_BLOCKPAGE(root_table.cold_journal[i], block, 0);
     83                block_dirty_table[block] = 0;
     84                block++;
     85              }
     86            }
     87          
     88            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
     89              if (ret == STATUS_SUCCESS) {
     90                ret = UBI_Erase(block, block);
     91              }
     92          
     93              if (ret == STATUS_SUCCESS) {
     94                PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[i], block, 0);
     95                block_dirty_table[block] = 0;
     96                block++;
     97              }
     98            }
     99          
    100            return STATUS_SUCCESS;
    101          }
    102          
    103          STATUS DATA_Write(PGADDR addr, void* buffer, BOOL is_hot) {
    104            UINT32 i;
    105            UINT32* edition;
    106            PHY_BLOCK block;
    107            PAGE_OFF page;
    108            JOURNAL_ADDR* data_journal;
    109            SPARE* meta_data;
    110            STATUS ret = STATUS_SUCCESS;
    111          
    112            /* TODO: optimize this critical path */
    113            /* TODO: Bad Page Marker, skip the bad PAGE instead of bad BLOCK. */
    114          
    115            if (is_hot == TRUE) {
    116              data_journal = root_table.hot_journal;
    117              meta_data = &(hot_meta_data[0][0]);
    118              edition = &edition_in_hot_journal;
    119            } else {
    120              data_journal = root_table.cold_journal;
    121              meta_data = &(cold_meta_data[0][0]);
    122              edition = &edition_in_cold_journal;
    123            }
    124          
    125            /* find an idle non-full block */
    126            do {
    127              for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {//1
    128                if (PM_NODE_PAGE(data_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    129                  ret = UBI_ReadStatus(PM_NODE_BLOCK(data_journal[i]));
    130                  if (ret == STATUS_SUCCESS) {
    131                    /* success means idle */
    132                    data_journal = &data_journal[i];
    133                    meta_data = meta_data + i * PAGE_PER_PHY_BLOCK;
    134                    break;
    135                  }
    136                }
    137              }
    138            } while (ret == STATUS_DIE_BUSY);
    139          
    140            ASSERT(ret == STATUS_SUCCESS);
    141            if (buffer != NULL) {
    142              block = PM_NODE_BLOCK(*data_journal);//获得逻辑II块页号
    143              page = PM_NODE_PAGE(*data_journal);
    144          
    145              /* prepare spare data, and set in meta table */
    146              meta_data[page][0] = addr;
    147              meta_data[page][1] = (*edition);
    148              (*edition) = (*edition) + 1;
    149          
    150              /* write the page to journal block */
    151              ret = UBI_Write(block, page, buffer, meta_data[page], TRUE);
    152              if (ret == STATUS_SUCCESS) {
    153                /* update PMT */
    154                ret = PMT_Update(addr, block, page);
    155              }
    156          
    157              if (ret == STATUS_SUCCESS) {
    158                /* update journal */
    159                PM_NODE_SET_BLOCKPAGE(*data_journal, block, page + 1);
    160              }
    161          
    162              if (PM_NODE_PAGE(*data_journal) == PAGE_PER_PHY_BLOCK - 1) {
    163                /* write meta data to last page */
    164                ret = UBI_Write(block, PAGE_PER_PHY_BLOCK - 1, meta_data, NULL, FALSE);
    165              }
    166            } else {
    167              /* no buffer, so no need to write data. Just treat it as page trim. */
    168              /* update PMT */
    169              ret = PMT_Update(addr, INVALID_BLOCK, INVALID_PAGE);
    170            }
    171          
    172            return ret;
    173          }
    174          
    175          STATUS DATA_Commit() {
    176            STATUS ret;
    177          
    178            ret = HDI_Commit();
    179            if (ret == STATUS_SUCCESS) {
    180              ret = PMT_Commit();
    181            }
    182          
    183            if (ret == STATUS_SUCCESS) {
    184              ret = BDT_Commit();
    185            }
    186          
    187            if (ret == STATUS_SUCCESS) {
    188              ret = ROOT_Commit();
    189            }
    190          
    191            if (ret == STATUS_SUCCESS) {
    192              edition_in_hot_journal = 0;
    193              edition_in_cold_journal = 0;
    194            }
    195          
    196            return ret;
    197          }
    198          
    199          BOOL DATA_IsFull(BOOL hot_journal) {
    200            UINT32 i;
    201            BOOL ret = TRUE;
    202          
    203            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
    204              if (hot_journal == TRUE) {//块中页用完返回true，没用完，返回false
    205                if (PM_NODE_PAGE(root_table.hot_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    206                  ret = FALSE;
    207                  break;
    208                }
    209              } else {
    210                if (PM_NODE_PAGE(root_table.cold_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    211                  ret = FALSE;
    212                  break;
    213                }
    214              }
    215            }
    216          
    217            return ret;
    218          }
    219          
    220          STATUS DATA_Reclaim(BOOL is_hot) {
    221            UINT32 i, j;
    222            UINT32* edition;
    223            UINT32 total_valid_page = 0;
    224            PAGE_OFF next_dirty_count = 0;
    225            PAGE_OFF target_dirty_count = MAX_DIRTY_PAGES;//63
    226            UINT32 found_block = 0;
    227            JOURNAL_ADDR* journal;
    228            JOURNAL_ADDR* exclude_journal;
    229            SPARE* meta_data;
    230            UINT32 total_reclaimed_page = 0;
    231            LOG_BLOCK reclaim_block;
    232            LOG_BLOCK dirty_block;
    233            PAGE_OFF reclaim_page = 0;
    234            PAGE_OFF page;
    235            SPARE* meta_data_buffer;
    236            LOG_BLOCK true_block = INVALID_BLOCK;
    237            PAGE_OFF true_page = INVALID_PAGE;
    238            SPARE spare;
    239            STATUS ret = STATUS_SUCCESS;
    240          
    241            if (is_hot == TRUE) {
    242              journal = root_table.hot_journal;
    243              exclude_journal = root_table.cold_journal;
    244              meta_data = &(hot_meta_data[0][0]);
    245              edition = &edition_in_hot_journal;
    246            } else {
    247              journal = root_table.cold_journal;
    248              exclude_journal = root_table.hot_journal;
    249              meta_data = &(cold_meta_data[0][0]);
    250              edition = &edition_in_cold_journal;
    251            }
    252          
    253            /* data reclaim process:
    254             * - flush and release all write buffer
    255             * - find the dirtiest blocks.
    256             * - copy valid pages in dirty blocks to reclaim blocks,
    257             * - update PMT and reclaim journal (keep integrity for PLR)
    258             * - erase dirtiest blocks, assign to new low EC blocks in same die
    259             * - update journals: reclaim ==> journal, dirty ==> reclaim
    260             */
    261          
    262            /* flush and release all write buffer */
    263            if (ret == STATUS_SUCCESS) {
    264              ret = UBI_Flush();
    265            }
    266            
    267            
    268            //jsjpenn
    269            //可在针对ransom的时候修改此处的垃圾回收机制
    270            //在状态2时不对保留的valid LEB进行GC
    271            //由于每次总是从LEB的最前面找BDT最大的LEB，随着对validLEB中data的更新，可能导致对valdLEB进行GC
    272            //即对valid PEB执行擦除  
    273            UINT32 GC_start;
    274            if(g_state==1){
    275              GC_start=DATA_START_BLOCK;//LEB=56
    276            }else{
    277              GC_start=DATA_START_BLOCK+g_ValidPEBNum+1;//从validLEB之后的LEB开始，g_ValidPEBNum也是validLEB的个数
    278            }
    279              
    280            
    281          
    282            /* find the dirtiest blocks */
    283            if (ret == STATUS_SUCCESS) {
    284              while (found_block != JOURNAL_BLOCK_COUNT) {
    285                //jsjpenn
    286                for (i = GC_start; i <= DATA_LAST_BLOCK; i++) {
    287                  /* exclude journal blocks */
    288                  for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    289                    if (i == PM_NODE_BLOCK(exclude_journal[j])) {
    290                      /* skip the journal block */
    291                      break;
    292                    }
    293                  }
    294          
    295                  if (j < JOURNAL_BLOCK_COUNT) {
    296                    continue;
    297                  }
    298                  //uart_printf("I: %d\n", i);
    299                  if (block_dirty_table[i] == target_dirty_count && current_time - 5 >= invalid_time[i]) {
    300                    dirty_blocks[found_block] = i;
    301                    total_valid_page += (MAX_DIRTY_PAGES - block_dirty_table[i]);
    302                    found_block++;
    303                  } else {
    304                    /* set the next target dirty count */
    305                    if (block_dirty_table[i] < target_dirty_count
    306                        && block_dirty_table[i] > next_dirty_count) {
    307                      next_dirty_count = block_dirty_table[i];
    308                    }
    309                  }
    310          
    311                  if (found_block == JOURNAL_BLOCK_COUNT) {
    312                    break;
    313                  }
    314                }
    315          
    316                /* find more dirty blocks */
    317                target_dirty_count = next_dirty_count;
    318                next_dirty_count = 0;
    319              }
    320            }
    321          
    322            if (ret == STATUS_SUCCESS) {
    323              if (total_valid_page != 0) {
    324                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    325                  /* copy valid pages in dirty blocks to reclaim blocks */
    326                  /* keep integrity before PMT_Update() */
    327                  reclaim_block = PM_NODE_BLOCK(root_table.reclaim_journal[j]);
    328                  reclaim_page = 0;
    329                  dirty_block = dirty_blocks[j];
    330                  meta_data_buffer = meta_data + j * PAGE_PER_PHY_BLOCK;
    331          
    332                  ret = UBI_Read(dirty_block, PAGE_PER_PHY_BLOCK - 1, pages_buffer, NULL);
    333                  if (ret == STATUS_SUCCESS) {
    334                    for (page = 0; page < PAGE_PER_PHY_BLOCK - 1; page++) {
    335                      if (ret == STATUS_SUCCESS) {
    336                        ret = PMT_Search(pages_buffer[page][0], &true_block, &true_page);//查找各逻辑地址I所对应的块、页号
    337                      }
    338          
    339                      if (ret == STATUS_SUCCESS) {
    340                        if (true_block == dirty_block && true_page == page) {//若是valid页
    341                          /* this page is valid */
    342                          /* copy valid page to reclaim block */
    343                          ret = UBI_Read(dirty_block, page, data_buffer, spare);
    344                          if (ret == STATUS_SUCCESS) {
    345                            /* logical page address is not changed */
    346                            spare[1] = total_reclaimed_page;
    347          
    348                            ret = UBI_Write(reclaim_block, reclaim_page, data_buffer,
    349                                            spare, FALSE);
    350                          }
    351          
    352                          if (ret == STATUS_SUCCESS) {
    353                            /* update pmt */
    354                            ret = PMT_Update(pages_buffer[page][0], reclaim_block,
    355                                             reclaim_page);
    356          
    357                            /* check logical page address */
    358                            ASSERT(spare[0] == pages_buffer[page][0]);
    359                            /* check edition number */
    360                            ASSERT(spare[1] == total_reclaimed_page);
    361          
    362                            /* update meta data */
    363                            meta_data_buffer[reclaim_page][0] = spare[0];
    364                            meta_data_buffer[reclaim_page][1] = spare[1];
    365                          }
    366          
    367                          if (ret == STATUS_SUCCESS) {
    368                            reclaim_page++;
    369                            total_reclaimed_page++;
    370          
    371                            /* update journals */
    372                            PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[j],
    373                                                  reclaim_block, reclaim_page);
    374                          }
    375                        }
    376                      }
    377                    }
    378                  }
    379                }
    380          
    381                ASSERT(total_valid_page == total_reclaimed_page);
    382          
    383                /* copied all valid page in all dirty blocks.
    384                 * Erase dirtiest blocks, assign to new low EC blocks in different
    385                 * dice, and update journals: reclaim ==> journal, dirty ==> reclaim
    386                 */
    387                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    388                  if (ret == STATUS_SUCCESS) {
    389                    ret = UBI_Erase(dirty_blocks[j], j);
    390                  }
    391          
    392                  if (ret == STATUS_SUCCESS) {
    393                    journal[j] = root_table.reclaim_journal[j];
    394                    PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[j], dirty_blocks[j],0);
    395          
    396                    /* update blocks: origin journal - not changed
    397                     *                origin dirty   - clear all dirty
    398                     *                origin reclaim - not changed, and shoudl be 0
    399                     */
    400                    block_dirty_table[dirty_blocks[j]] = 0;
    401                    block_dirty_table[PM_NODE_BLOCK(journal[j])] = 0;
    402                  }
    403                }
    404              } else {
    405                /* erase dirty blocks, update journals, and no need to copy pages */
    406                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    407                  if (ret == STATUS_SUCCESS) {
    408                    ret = UBI_Erase(dirty_blocks[j], j);
    409                  }
    410          
    411                  if (ret == STATUS_SUCCESS) {
    412                    /* dirty ==> journal, reclaim unchanged */
    413                    PM_NODE_SET_BLOCKPAGE(journal[j], dirty_blocks[j], 0);
    414          
    415                    /* BDT: clear dirty (now journal) */
    416                    block_dirty_table[dirty_blocks[j]] = 0;
    417                  }
    418                }
    419              }
    420            }
    421          
    422            if (ret == STATUS_SUCCESS) {
    423              (*edition) = total_valid_page;
    424            }
    425          
    426            return ret;
    427          }
    428          
    429          STATUS DATA_Replay(JOURNAL_ADDR* journals) {
    430            UINT32 journal_edition = 0;
    431            UINT32 j_index = 0;
    432            SPARE* meta_data;
    433            LOG_BLOCK block;
    434            PAGE_OFF page;
    435            SPARE spare;
    436            UINT32 page_edition;
    437            PGADDR logical_page_address;
    438            SPARE* meta_data_buffer;
    439            STATUS ret = STATUS_SUCCESS; 
    440            
    441            if (journals == root_table.hot_journal) {
    442              meta_data = &(hot_meta_data[0][0]);   
    443            } else {
    444              meta_data = &(cold_meta_data[0][0]);    
    445            }
    446          
    447            while (journal_edition != MAX_UINT32) {
    448              for (j_index = 0; j_index < JOURNAL_BLOCK_COUNT; j_index++) {//1
    449                block = PM_NODE_BLOCK(journals[j_index]);
    450                page = PM_NODE_PAGE(journals[j_index]);
    451          
    452                if (ret == STATUS_SUCCESS) {
    453                  ret = UBI_Read(block, page, NULL, spare);
    454                }
    455          
    456                if (ret == STATUS_SUCCESS) {
    457                  /* this page was written, replay it */
    458                  logical_page_address = spare[0];
    459                  page_edition = spare[1];
    460          
    461                  if (page_edition != journal_edition) {
    462                    /* replay pages in the edition order */
    463                    continue;
    464                  }
    465                  /* update PMT */
    466                  ret = PMT_Update(logical_page_address, block, page);
    467                }
    468          
    469                if (ret == STATUS_SUCCESS) {
    470                  /* update journal */
    471                  PM_NODE_SET_BLOCKPAGE(journals[j_index], block, page + 1);
    472          
    473                  /* find next edition of journal */
    474                  journal_edition++;
    475                  break;
    476                } else {
    477                  /* restore the edition */
    478                  if (journals == root_table.hot_journal) {
    479                    edition_in_hot_journal = journal_edition;
    480                  } else {
    481                    edition_in_cold_journal = journal_edition;
    482                  }
    483          
    484                  /* empty page in this journal block */
    485                  journal_edition = MAX_UINT32;
    486                  ret = STATUS_SUCCESS;
    487                  continue;
    488                }
    489              }
    490            }
    491          
    492            /* build up the meta table */
    493            for (j_index = 0; j_index < JOURNAL_BLOCK_COUNT; j_index++) {//1
    494              block = PM_NODE_BLOCK(journals[j_index]);
    495          
    496              /* point to the right meta data address */
    497              meta_data_buffer = meta_data + j_index * PAGE_PER_PHY_BLOCK;
    498          
    499              for (page = 0; page < PAGE_PER_PHY_BLOCK; page++) {
    500                if (ret == STATUS_SUCCESS) {
    501                  ret = UBI_Read(block, page, NULL, spare);
    502                }
    503          
    504                if (ret == STATUS_SUCCESS) {
    505                  meta_data_buffer[page][0] = spare[0];
    506                  meta_data_buffer[page][1] = spare[1];
    507                } else if (page == PAGE_PER_PHY_BLOCK - 1) {
    508                  /* write meta data to last page */
    509                  ret = UBI_Write(block, PAGE_PER_PHY_BLOCK - 1, meta_data_buffer, NULL,FALSE);
    510                } else {
    511                  ret = STATUS_SUCCESS;
    512                  break;
    513                }
    514              }
    515            }
    516          
    517            return ret;
    518          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DATA_Commit
         8   -> BDT_Commit
         8   -> HDI_Commit
         8   -> PMT_Commit
         8   -> ROOT_Commit
      16   DATA_Format
        16   -> UBI_Erase
       8   DATA_IsFull
      72   DATA_Reclaim
        72   -> PMT_Search
        72   -> PMT_Update
        72   -> UBI_Erase
        72   -> UBI_Flush
        72   -> UBI_Read
        72   -> UBI_Write
      40   DATA_Replay
        40   -> PMT_Update
        40   -> UBI_Read
        40   -> UBI_Write
      40   DATA_Write
        40   -> PMT_Update
        40   -> UBI_ReadStatus
        40   -> UBI_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      68  DATA_Commit
     196  DATA_Format
      66  DATA_IsFull
     736  DATA_Reclaim
     286  DATA_Replay
     254  DATA_Write
     512  cold_meta_data
    2048  data_buffer
       4  dirty_blocks
       4  edition_in_cold_journal
       4  edition_in_hot_journal
     512  hot_meta_data
    2048  pages_buffer

 
 5 132 bytes in section .bss
 1 714 bytes in section .text
 
 1 714 bytes of CODE memory
 5 132 bytes of DATA memory

Errors: none
Warnings: none
