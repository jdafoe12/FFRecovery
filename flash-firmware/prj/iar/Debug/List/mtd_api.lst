###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        02/Aug/2023  19:53:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\mtd\mtd_api.c
#    Command line =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\mtd\mtd_api.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List
#        -o C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\ -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\List\mtd_api.lst
#    Object file  =  
#        C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\prj\iar\Debug\Obj\mtd_api.o
#
###############################################################################

C:\Users\bchen-adm\Desktop\FFRecovery2\nsac-hiftl\core\mtd\mtd_api.c
      1          /*********************************************************
      2           * Module name: mtd_api.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Memory Technology Device. Translate block and
     28           *    sector offset to physical chip/row/column address.
     29           *
     30           *********************************************************/
     31          
     32          #include <core\inc\cmn.h>
     33          #include <core\inc\mtd.h>
     34          
     35          #include <sys\sys.h>
     36          #include "mtd_nand.h"
     37            
     38           
     39             
     40          #if (SIM_TEST == FALSE)
     41          #include "arm_comm.h"
     42          //extern void Dly_us(Int32U Dly);
     43          #endif
     44          
     45          #define TRANS_PHY_BLOCK(b)             \
     46          ((((b)&(TOTAL_DIE_COUNT-1))<<BLOCK_PER_PLANE_SHIFT) | \
     47            ((b)>>TOTAL_DIE_SHIFT))
     48          #define MTD_REAL_BLOCK(b, p)           \
     49          (((TRANS_PHY_BLOCK((b)))<<PLANE_PER_DIE_SHIFT)+(p))
     50          #define MTD_ROW_ADDRESS(block, plane, page)    \
     51          (((MTD_REAL_BLOCK((block), (plane)))<<PAGE_PER_BLOCK_SHIFT)+(page))
     52          
     53          #define MTD_DIE_NUM(b)        ((b)&(DIE_PER_CHIP-1))
     54          #define MTD_CHIP_NUM(b)       (((b)>>DIE_PER_CHIP_SHIFT)&(CHIP_COUNT-1))
     55          #define MTD_MAX_RETRY_TIMES   (3)
     56          
     57          static STATUS mtd_readstatus(PHY_BLOCK block, UINT8* status_byte);
     58          
     59          /* TODO: exploit other NAND feature 
     60           * - copy back for reclaim, read/write pages in the same plane/die
     61           * - cache read/write
     62           * - de-select CE when free
     63           * - ONFI2/3 ...
     64           */
     65          
     66          void MTD_Init() {
     67            NAND_Init();
     68            /* reset all nand chips */
     69            MTD_Reset();
     70          }
     71          
     72          /* reset all flash chips */
     73          void MTD_Reset() {
     74            NAND_CHIP chip;
     75          
     76            for (chip = 0; chip < CHIP_COUNT; chip++) {
     77              NAND_SelectChip(chip);
     78              NAND_SendCMD(CMD_RESET);
     79            }
     80          }
     81          
     82          STATUS MTD_ReadID(NAND_CHIP chip, UINT8 id_data[], UINT8 bytes) {
     83            NAND_COL default_col = 0;
     84            NAND_ROW default_row = 0;
     85            STATUS ret = STATUS_SUCCESS;
     86          
     87            NAND_SelectChip(chip);
     88            NAND_SendCMD(CMD_READ_ID);
     89            /* read ID only need to send one cycle row address */
     90            NAND_SendAddr(default_col, default_row, 0, 1);
     91            NAND_ReceiveBytes(id_data, bytes);
     92          
     93            return ret;
     94          }
     95          
     96          STATUS MTD_Read(PHY_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare) {
     97            STATUS ret = STATUS_SUCCESS;
     98            BOOL ecc_corrected;
     99            UINT8 ecc_error_count;
    100            UINT8 retry_times = 0;
    101            NAND_ROW row_addr = 0;
    102            NAND_CHIP chip_addr = 0;
    103          
    104            /* check status and wait ready of the DIE to read, avoid RWW issue */
    105            (void) MTD_WaitReady(block);
    106          
    107            while (retry_times < MTD_MAX_RETRY_TIMES) {
    108              if (ret == STATUS_SUCCESS) {
    109                row_addr = (NAND_ROW) MTD_ROW_ADDRESS(block, 0, page);
    110                chip_addr = (NAND_CHIP) MTD_CHIP_NUM(block);
    111          
    112                /* select and check ready */
    113                NAND_SelectChip(chip_addr);
    114                NAND_SendCMD(CMD_READ);
    115                NAND_SendAddr(0, row_addr, CFG_NAND_COL_CYCLE, CFG_NAND_ROW_CYCLE);
    116                NAND_SendCMD(CMD_READ_COMMIT);
    117                NAND_WaitRB(chip_addr);
    118              }
    119          
    120              if (ret == STATUS_SUCCESS) {
    121                /* receive page data */
    122                ret = NAND_ReceiveData(buffer, spare);
    123                if (ret != STATUS_SUCCESS) {
    124                  /* TODO: check ecc handler algo */
    125                  ecc_corrected = NAND_ECCStatus(&ecc_error_count);
    126                  if (ecc_corrected == TRUE) {
    127                    /* error is corrected */
    128                    ret = STATUS_SUCCESS;
    129                  } else {
    130                    /* un-correctable, re-try before report error */
    131                    ret = STATUS_FAILURE;
    132                    break;
    133                  }
    134                }
    135          
    136                /* send next page in MPP */
    137                if (buffer != NULL) {
    138                  buffer = ((UINT8*) buffer) + PAGE_SIZE;
    139                }
    140              }
    141          
    142              if (ret == STATUS_FAILURE && retry_times < MTD_MAX_RETRY_TIMES - 1) {
    143                /* try again */
    144                retry_times++;
    145                ret = STATUS_SUCCESS;
    146                continue;
    147              } else {
    148                break;
    149              }
    150            }
    151          
    152            return ret;
    153          }
    154          
    155          STATUS MTD_Program(PHY_BLOCK block, PAGE_OFF page, void* buffer, SPARE spare) {
    156            NAND_ROW row_addr;
    157            NAND_CHIP chip_addr;
    158            STATUS ret = STATUS_SUCCESS;
    159            
    160            row_addr = (NAND_ROW) MTD_ROW_ADDRESS(block, 0, page);
    161            chip_addr = (NAND_CHIP) MTD_CHIP_NUM(block);
    162          
    163            NAND_SelectChip(chip_addr);
    164            NAND_SendCMD(CMD_PAGE_PROGRAM);
    165            NAND_SendAddr(0, row_addr, CFG_NAND_COL_CYCLE, CFG_NAND_ROW_CYCLE);
    166            NAND_SendData(buffer, spare);
    167          
    168            /* commit the whole write, multi-plane or one-plane write */
    169            NAND_SendCMD(CMD_PAGE_PROGRAM_COMMIT);
    170          
    171            return ret;
    172          }
    173          
    174          STATUS MTD_Erase(PHY_BLOCK block) {
    175            NAND_ROW row_addr;
    176            NAND_CHIP chip_addr = INVALID_CHIP;
    177            UINT8 retry_times = 0;
    178            STATUS ret = STATUS_SUCCESS;  
    179          
    180            while (retry_times < MTD_MAX_RETRY_TIMES) {
    181              row_addr = (NAND_ROW) MTD_ROW_ADDRESS(block, 0, 0);
    182              chip_addr = (NAND_CHIP) MTD_CHIP_NUM(block);
    183          
    184              NAND_SelectChip(chip_addr);
    185              NAND_SendCMD(CMD_BLOCK_ERASE);
    186              NAND_SendAddr(0, row_addr, 0, CFG_NAND_ROW_CYCLE);
    187              NAND_SendCMD(CMD_BLOCK_ERASE_COMMIT);
    188          
    189              ASSERT(chip_addr != INVALID_CHIP);
    190              NAND_WaitRB(chip_addr);
    191          
    192              /* check status */
    193              ret = MTD_ReadStatus(block);
    194              if (ret != STATUS_SUCCESS) {
    195                /* try again */
    196                retry_times++;
    197                continue;
    198              } else {
    199                break;
    200              }
    201            }
    202          
    203            return ret;
    204          }
    205          
    206          STATUS MTD_CheckBlock(PHY_BLOCK block) {
    207            UINT8 read_byte;
    208            NAND_ROW row_addr = MAX_UINT8;
    209            NAND_CHIP chip_addr;
    210            PAGE_OFF page;
    211            STATUS ret = STATUS_SUCCESS;
    212          
    213            /* only check the bad block byte in the first 2 pages */
    214            for (page = 0; page < 2; page++) {
    215              if (ret == STATUS_SUCCESS) {
    216                row_addr = (NAND_ROW) MTD_ROW_ADDRESS(block, 0, 0);
    217                chip_addr = (NAND_CHIP) MTD_CHIP_NUM(block);
    218          
    219                /* read the page */
    220                NAND_SelectChip(chip_addr);
    221                NAND_SendCMD(CMD_READ);
    222                NAND_SendAddr(0, row_addr, CFG_NAND_COL_CYCLE, CFG_NAND_ROW_CYCLE);
    223                NAND_SendCMD(CMD_READ_COMMIT);
    224          
    225                /* wait on read data ready */
    226                NAND_WaitRB(chip_addr);
    227              }
    228          
    229              if (ret == STATUS_SUCCESS) {
    230                ASSERT(row_addr != MAX_UINT8);
    231          
    232                /* read the first byte in spare area */
    233                NAND_SendCMD(CMD_RANDOM_DATA_OUT);
    234                NAND_SendAddr(PAGE_SIZE, row_addr, CFG_NAND_COL_CYCLE, 0);
    235                NAND_SendCMD(CMD_RANDOM_DATA_OUT_COMMIT);
    236          
    237                /* only read one byte */
    238                NAND_ReceiveBytes(&read_byte, 1);
    239          
    240                if (read_byte != 0xff) {
    241                  /* this block is marked as BAD block */
    242                  ret = STATUS_BADBLOCK;
    243                }
    244              }
    245            }
    246          
    247            return ret;
    248          }
    249          
    250          STATUS MTD_ReadStatus(PHY_BLOCK block) {
    251            UINT8 status_byte;
    252            STATUS ret = STATUS_SUCCESS;
    253          
    254            /* sort the block in die interleave way */
    255            ASSERT(block < CFG_LOG_BLOCK_COUNT);
    256          
    257            ret = mtd_readstatus(block, &status_byte);
    258            if (ret == STATUS_SUCCESS) {
    259              if (NAND_STATUS_BUSY(status_byte) == TRUE) {
    260                ret = STATUS_DIE_BUSY;
    261              } else if (NAND_STATUS_FAIL(status_byte) == TRUE) {
    262                ret = STATUS_BADBLOCK;
    263              } else {
    264                ret = STATUS_SUCCESS;
    265              }
    266            }
    267          
    268            return ret;
    269          }
    270          
    271          STATUS MTD_WaitReady(PHY_BLOCK block) {
    272            STATUS ret;
    273          
    274            /* sort the block in die interleave way */
    275            ASSERT(block < CFG_LOG_BLOCK_COUNT);
    276          
    277            do {
    278              ret = MTD_ReadStatus(block);
    279            } while (ret == STATUS_DIE_BUSY);
    280          
    281            return ret;
    282          }
    283          
    284          static STATUS mtd_readstatus(PHY_BLOCK block, UINT8* status_byte) {
    285            NAND_CHIP chip_addr;
    286            NAND_CMD die_status;
    287            STATUS ret = STATUS_SUCCESS;
    288          
    289            if (ret == STATUS_SUCCESS) {
    290              chip_addr = (NAND_CHIP) MTD_CHIP_NUM(block);
    291          #if (DIE_PER_CHIP_SHIFT == 0)
    292              /* single die */
    293              die_status = CMD_READ_STATUS;
    294          #else
    295              /* dual die in one ce, different cmd to poll status */
    296              if (MTD_DIE_NUM(block) == 0)
    297              {
    298                die_status = CMD_READ_STATUS_DIE1;
    299              }
    300              else
    301              {
    302                die_status = CMD_READ_STATUS_DIE2;
    303              }
    304          #endif
    305          
    306              NAND_SelectChip(chip_addr);
    307              NAND_SendCMD(die_status);
    308          
    309              NAND_ReceiveBytes(status_byte, 1);
    310            }
    311          
    312            return ret;
    313          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   MTD_CheckBlock
        32   -> NAND_ReceiveBytes
        32   -> NAND_SelectChip
        32   -> NAND_SendAddr
        32   -> NAND_SendCMD
        32   -> NAND_WaitRB
      24   MTD_Erase
        24   -> MTD_ReadStatus
        24   -> NAND_SelectChip
        24   -> NAND_SendAddr
        24   -> NAND_SendCMD
        24   -> NAND_WaitRB
       8   MTD_Init
         8   -> MTD_Reset
         8   -> NAND_Init
      24   MTD_Program
        24   -> NAND_SelectChip
        24   -> NAND_SendAddr
        24   -> NAND_SendCMD
        24   -> NAND_SendData
      40   MTD_Read
        40   -> MTD_WaitReady
        40   -> NAND_ECCStatus
        40   -> NAND_ReceiveData
        40   -> NAND_SelectChip
        40   -> NAND_SendAddr
        40   -> NAND_SendCMD
        40   -> NAND_WaitRB
      24   MTD_ReadID
        24   -> NAND_ReceiveBytes
        24   -> NAND_SelectChip
        24   -> NAND_SendAddr
        24   -> NAND_SendCMD
       8   MTD_ReadStatus
         8   -> mtd_readstatus
       8   MTD_Reset
         8   -> NAND_SelectChip
         8   -> NAND_SendCMD
       8   MTD_WaitReady
         8   -> MTD_ReadStatus
      16   mtd_readstatus
        16   -> NAND_ReceiveBytes
        16   -> NAND_SelectChip
        16   -> NAND_SendCMD


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     140  MTD_CheckBlock
      98  MTD_Erase
      12  MTD_Init
      62  MTD_Program
     178  MTD_Read
      60  MTD_ReadID
      62  MTD_ReadStatus
      34  MTD_Reset
      32  MTD_WaitReady
      52  mtd_readstatus

 
 730 bytes in section .text
 
 730 bytes of CODE memory

Errors: none
Warnings: none
