###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        26/Oct/2022  20:51:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\core\ftl\ftl_pmt.c
#    Command line =  
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\core\ftl\ftl_pmt.c" -D BOOT_LEVEL_2 -lcN
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List" -o
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\prj\iar\..\..\"
#        -I "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\" --cpu_mode thumb -Ol
#        --use_c++_inline
#    List file    =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List\ftl_pmt.lst
#    Object file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj\ftl_pmt.o
#
###############################################################################

C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\core\ftl\ftl_pmt.c
      1          /*********************************************************
      2           * Module name: ftl_pmt.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           * Updated by vinay.g.jain@gmail.com on Nov 22 2014.
     26           *
     27           * Module Description:
     28           *    Page Mapping Table. It contains 2 layers of table. 
     29           *    The first layer is ROOT, and points to every second
     30           *       layer of PMT (aka. CLUSTER)
     31           *    The second layer is PMT pages, and holding logical 
     32           *       page mapping info, pointing to UBI block/page.
     33           *
     34           *********************************************************/
     35          
     36          #include <core\inc\cmn.h>
     37          #include <core\inc\ftl.h>
     38          #include <core\inc\ubi.h>
     39          #include <sys\sys.h>
     40          #include "ftl_inc.h"
     41          
     42          #define PMT_CURRENT_BLOCK  (PM_NODE_BLOCK(root_table.pmt_current_block))
     43          #define PMT_CURRENT_PAGE   (PM_NODE_PAGE(root_table.pmt_current_block))
     44          #define PMT_RECLAIM_BLOCK  (PM_NODE_BLOCK(root_table.pmt_reclaim_block))
     45          #define PMT_RECLAIM_PAGE   (PM_NODE_PAGE(root_table.pmt_reclaim_block))
     46          
     47          #if defined(__ICCARM__)
     48          /* must be aligned to 4bytes, because the lowest 2 bits is reserved */
     49          #pragma data_alignment=4
     50          #endif
     51          static PM_NODE pm_node_caches[PMT_CACHE_COUNT];
     52          static PM_NODE_ADDR pm_cache_origin_location[PMT_CACHE_COUNT];
     53          static PMT_CLUSTER pm_cache_cluster[PMT_CACHE_COUNT];
     54          /* meta data in last page */
     55          static PMT_CLUSTER meta_data[PAGE_PER_PHY_BLOCK];
     56          /* buffer used in reclaim */
     57          static PMT_CLUSTER clusters[MPP_SIZE / sizeof(PMT_CLUSTER)];
     58          static UINT8 pm_node_buffer[MPP_SIZE];
     59          
     60          
     61          //jsjpenn
     62          
     63          extern  STATUS pmt_reclaim_blocks();//为了能在ftl_api.c中被调用
     64          
     65          
     66          STATUS PMT_Format() {
     67            LOG_BLOCK pmt_block = PMT_START_BLOCK;
     68            PAGE_OFF pmt_page = 0;
     69            PM_NODE pm_node;
     70            STATUS ret = STATUS_SUCCESS;
     71            SPARE spare;
     72            UINT32 i;
     73            UINT32 j;
     74            UINT32 pmt_cluster_count = ((FTL_Capacity() + PM_PER_NODE - 1) /  PM_PER_NODE);//总簇数471
     75            /* root table has enough space to hold 1st level of pmt */
     76            ASSERT(pmt_cluster_count < MAX_PM_CLUSTERS);
     77          
     78            for (i = 0; i < pmt_cluster_count; i++) {
     79              if (ret == STATUS_SUCCESS) {
     80                /* format a cluster of PMT */
     81                for (j = 0; j < PM_PER_NODE; j++) {//512
     82                  pm_node[j] = INVALID_PM_NODE;
     83                }
     84                spare[0] = i;//簇号
     85                ret = UBI_Write(pmt_block, pmt_page, pm_node, spare, FALSE);
     86              }
     87          
     88              if (ret == STATUS_SUCCESS) {
     89                meta_data[pmt_page] = i;//簇号
     90          
     91                PM_NODE_SET_BLOCKPAGE(root_table.page_mapping_nodes[i], pmt_block, pmt_page);
     92          
     93                /* last page is reserved for meta data */
     94                if (pmt_page < PAGE_PER_PHY_BLOCK - 1) {
     95                  pmt_page++;
     96                }
     97          
     98                if (pmt_page == PAGE_PER_PHY_BLOCK - 1) {
     99                  ret = UBI_Write(pmt_block, pmt_page, meta_data, NULL, FALSE);//PMT区块的最后一个存前63页映射的簇号
    100                  if (ret == STATUS_SUCCESS) {
    101                    block_dirty_table[pmt_block] = 0;
    102                    pmt_page = 0;
    103                    pmt_block++;
    104                  }
    105                }
    106              }
    107            }
    108          
    109            if (ret == STATUS_SUCCESS) {
    110              /* set journal blocks */
    111              PM_NODE_SET_BLOCKPAGE(root_table.pmt_current_block, pmt_block, pmt_page);
    112              PM_NODE_SET_BLOCKPAGE(root_table.pmt_reclaim_block, pmt_block + 1, 0);
    113          
    114              /* update block dirty table */
    115              block_dirty_table[pmt_block] = 0;
    116              block_dirty_table[pmt_block + 1] = 0;//表示已分配
    117            }
    118          
    119            return ret;
    120          }
    121          
    122          STATUS PMT_Init() {
    123            UINT32 i;
    124            STATUS ret = STATUS_SUCCESS;
    125            
    126            
    127            
    128            /* init cache */
    129            for (i = 0; i < PMT_CACHE_COUNT; i++) {//4
    130              memset(pm_node_caches[i], 0, MPP_SIZE);
    131              pm_cache_origin_location[i] = INVALID_PM_NODE;
    132              pm_cache_cluster[i] = INVALID_CLUSTER;
    133            }
    134          
    135            /* PLR: the PMT is only validated after writing ROOT. do some test. */
    136            return ret;
    137          }
    138          
    139          STATUS PMT_Update(PGADDR page_addr, LOG_BLOCK block, PAGE_OFF page) {
    140            PMT_CLUSTER cluster = CLUSTER_INDEX(page_addr);//计算逻辑I地址所在簇号
    141            PM_NODE_ADDR* cluster_addr;
    142            LOG_BLOCK edit_block;
    143            STATUS ret = STATUS_SUCCESS;
    144          
    145            if (PM_NODE_IS_CACHED(root_table.page_mapping_nodes[cluster]) == FALSE) {
    146              /* load page in cache before updating bdt/hdi/root,
    147               * because it may cause a commit. */
    148              ret = PMT_Load(PM_NODE_BLOCK(root_table.page_mapping_nodes[cluster]),
    149                             PM_NODE_PAGE(root_table.page_mapping_nodes[cluster]),
    150                             cluster);
    151            }
    152          
    153            if (ret == STATUS_SUCCESS) {
    154              cluster_addr = PM_NODE_ADDRESS(root_table.page_mapping_nodes[cluster]);
    155              if (cluster_addr[PAGE_IN_CLUSTER(page_addr)] != INVALID_PM_NODE) {
    156                /* update BDT: increase dirty page count of the edited data block */
    157                edit_block = PM_NODE_BLOCK(cluster_addr[PAGE_IN_CLUSTER(page_addr)]);//目标映射所在簇在PMT区的块号
    158                block_dirty_table[edit_block]++;
    159                ASSERT(block_dirty_table[edit_block] <= MAX_DIRTY_PAGES);
    160              }
    161          
    162              /* update PMT */
    163              if (block != INVALID_BLOCK) {
    164                ASSERT(page != INVALID_PAGE);
    165                PM_NODE_SET_BLOCKPAGE(cluster_addr[PAGE_IN_CLUSTER(page_addr)], block, page);//逻辑I的映射更新到新的逻辑II块页上
    166                                                                                             //相当于修改了SRAM中对应的pm_node_caches[][]
    167              } else {
    168                /* trim page, set it invalid page in PMT, and it will be
    169                 * discarded in the next reclaim.
    170                 */
    171                ASSERT(page == INVALID_PAGE);
    172                cluster_addr[PAGE_IN_CLUSTER(page_addr)] = INVALID_PM_NODE;
    173              }
    174          
    175              /* set dirty bit */
    176              PM_NODE_SET_DIRTY(root_table.page_mapping_nodes[cluster]);//将该簇映射设为脏，即被更新过了
    177            }
    178          
    179            return ret;
    180          }
    181          
    182          STATUS PMT_Search(PGADDR page_addr, LOG_BLOCK* block, PAGE_OFF* page) {
    183            PMT_CLUSTER cluster = CLUSTER_INDEX(page_addr);
    184            PM_NODE_ADDR* cluster_addr;
    185            PM_NODE_ADDR pm_node;
    186            STATUS ret = STATUS_SUCCESS;
    187            
    188            // JD
    189            if(ftl_read_state == 0) {
    190              if (PM_NODE_IS_CACHED(root_table.page_mapping_nodes[cluster]) == FALSE) {
    191                /* load page in cache */
    192                ret = PMT_Load(PM_NODE_BLOCK(root_table.page_mapping_nodes[cluster]),
    193                             PM_NODE_PAGE(root_table.page_mapping_nodes[cluster]),
    194                             cluster);
    195              }
    196          
    197              if (ret == STATUS_SUCCESS) {
    198                ASSERT(root_table.page_mapping_nodes[cluster] != INVALID_PM_NODE);
    199          
    200                cluster_addr = PM_NODE_ADDRESS(root_table.page_mapping_nodes[cluster]);
    201                ASSERT(cluster_addr != 0);
    202          
    203                pm_node = cluster_addr[PAGE_IN_CLUSTER(page_addr)];
    204                if (pm_node != INVALID_PM_NODE) {
    205                  *block = PM_NODE_BLOCK(pm_node);
    206                  *page = PM_NODE_PAGE(pm_node);
    207                } else {
    208                  *block = INVALID_BLOCK;
    209                  *page = INVALID_PAGE;
    210                }
    211              }
    212            }
    213            else if(ftl_read_state == 1) {
    214              UINT32 pmNodes[PM_PER_NODE];
    215              LOG_BLOCK pmBlock = PMTRESORE_START_BLOCK + (int)(cluster / PAGE_PER_PHY_BLOCK); // The logical block number containing the PM
    216              PAGE_OFF pmPage = cluster % PAGE_PER_PHY_BLOCK; // the page offset in pm block
    217              
    218              ftl_read_state = 0;
    219              ret = UBI_Read(pmBlock, pmPage, &pmNodes, NULL);
    220              ftl_read_state = 1;
    221              
    222              pm_node = pmNodes[PAGE_IN_CLUSTER(page_addr)];
    223              if (pm_node != INVALID_PM_NODE) {
    224                *block = PM_NODE_BLOCK(pm_node);
    225                *page = PM_NODE_PAGE(pm_node);
    226              } else {
    227                *block = INVALID_BLOCK;
    228                *page = INVALID_PAGE;
    229              };
    230              return ret;
    231            }
    232            // end JD
    233          
    234            return ret;
    235          }
    236          
    237          static STATUS PMT_Load(LOG_BLOCK block, PAGE_OFF page, PMT_CLUSTER cluster) {
    238            UINT32 i;
    239            PM_NODE_ADDR* cache_addr = NULL;
    240            STATUS ret = STATUS_SUCCESS;
    241          
    242            /* find the first empty cache slot */
    243            for (i = 0; i < PMT_CACHE_COUNT; i++) {
    244              if (pm_cache_origin_location[i] == INVALID_PM_NODE) {
    245                break;
    246              }
    247            }
    248          
    249            if (i == PMT_CACHE_COUNT) {
    250              i = 0;
    251          
    252              /* cache is full, commit to nand, and release all cache */
    253              ret = DATA_Commit();
    254              if (ret == STATUS_SUCCESS) {
    255                /* use updated PMT block and page */
    256                block = PM_NODE_BLOCK(root_table.page_mapping_nodes[cluster]);
    257                page = PM_NODE_PAGE(root_table.page_mapping_nodes[cluster]);
    258              }
    259            }
    260          
    261            /* read out the PM node from UBI */
    262            if (ret == STATUS_SUCCESS) {
    263              cache_addr = &((pm_node_caches[i])[0]);
    264              ret = UBI_Read(block, page, cache_addr, NULL);
    265            }
    266          
    267            /* update cache info */
    268            if (ret == STATUS_SUCCESS) {
    269              PM_NODE_SET_BLOCKPAGE(pm_cache_origin_location[i], block, page);
    270          
    271              /* update the cache address in memory to PMT table */
    272              root_table.page_mapping_nodes[cluster] = (UINT32) (cache_addr);
    273              
    274          
    275              /* the page mapping should be clean in ram */
    276              ASSERT((((UINT32 )(cache_addr)) & 0x3) == 0);
    277          
    278              pm_cache_cluster[i] = cluster;
    279            }
    280          
    281            return ret;
    282          }
    283          
    284          /* write back dirty node to UBI, and clear all cache */
    285          STATUS PMT_Commit() {
    286            UINT32 i;
    287            PM_NODE_ADDR pm_node;
    288            STATUS ret = STATUS_SUCCESS;
    289          
    290            /* find the dirty cache nodes */
    291            for (i = 0; i < PMT_CACHE_COUNT; i++) {
    292              if (pm_cache_cluster[i] == INVALID_CLUSTER) {
    293                continue;
    294              }
    295          
    296              pm_node = root_table.page_mapping_nodes[pm_cache_cluster[i]];//根据簇号，得到SRAM地址
    297              ASSERT(PM_NODE_IS_CACHED(pm_node) == TRUE);
    298              if (PM_NODE_IS_DIRTY(pm_node) == FALSE) {//clean
    299                /* update pmt in root table */
    300                root_table.page_mapping_nodes[pm_cache_cluster[i]] =
    301                    pm_cache_origin_location[i];
    302                continue;
    303              }
    304              //dirty
    305              /* check empty page space */
    306              if (PMT_CURRENT_PAGE != PAGE_PER_PHY_BLOCK) {
    307                /* last page is reserved */
    308                ASSERT(PMT_CURRENT_PAGE != (PAGE_PER_PHY_BLOCK - 1));
    309          
    310                if (ret == STATUS_SUCCESS) {
    311                  /* write page to UBI */
    312                  ret = UBI_Write(PMT_CURRENT_BLOCK, PMT_CURRENT_PAGE,
    313                                  pm_node_caches[i], &pm_cache_cluster[i], FALSE);
    314                  if (ret == STATUS_SUCCESS) {
    315                    meta_data[PMT_CURRENT_PAGE] = pm_cache_cluster[i];
    316                  }
    317                }
    318          
    319                if (ret == STATUS_SUCCESS) {
    320                  PMT_CLUSTER pm_cluster = pm_cache_cluster[i];
    321                  LOG_BLOCK old_pm_block;
    322          
    323                  /* update pmt in root table */
    324                  PM_NODE_SET_BLOCKPAGE(root_table.page_mapping_nodes[pm_cluster],
    325                                        PMT_CURRENT_BLOCK, PMT_CURRENT_PAGE);
    326          
    327                  /* update pmt journal */
    328                  PM_NODE_SET_BLOCKPAGE(root_table.pmt_current_block, PMT_CURRENT_BLOCK,
    329                                        PMT_CURRENT_PAGE+1);
    330          
    331                  /* update the block dirty table */
    332                  old_pm_block = PM_NODE_BLOCK(pm_cache_origin_location[i]);
    333          
    334                  block_dirty_table[old_pm_block]++;
    335                  ASSERT(block_dirty_table[old_pm_block] <= MAX_DIRTY_PAGES);
    336                }
    337              }
    338          
    339              if (PMT_CURRENT_PAGE == PAGE_PER_PHY_BLOCK - 1) {
    340                if (ret == STATUS_SUCCESS) {
    341                  ret = UBI_Write(PMT_CURRENT_BLOCK, PMT_CURRENT_PAGE,
    342                                  meta_data, NULL, FALSE);
    343                }
    344          
    345                if (ret == STATUS_SUCCESS) {
    346                  /* flush WIP data on all dice */
    347                  ret = UBI_Flush();
    348                }
    349          
    350                if (ret == STATUS_SUCCESS) {
    351                  ret = pmt_reclaim_blocks();
    352                }
    353              }
    354            }
    355          
    356            if (ret == STATUS_SUCCESS) {
    357              /* init the PMT to clear all cache */
    358              ret = PMT_Init();
    359            }
    360          
    361            return ret;
    362          }
    363          
    364          
    365          //jsjpenn
    366          //为了能在ftl_api.c中被调用
    367          
    368          STATUS pmt_reclaim_blocks() {
    369            UINT32 i = 0;
    370            UINT32 found_block = 0;
    371            UINT32 total_valid_page = 0;
    372            PAGE_OFF next_dirty_count = 0;
    373            PAGE_OFF target_dirty_count = MAX_DIRTY_PAGES;//63
    374            STATUS ret = STATUS_SUCCESS;
    375          
    376            /* find dirtiest block in different dice as new journal blocks */
    377            while (found_block != 1) {
    378              for (i = PMT_START_BLOCK; i < PMT_START_BLOCK + PMT_BLOCK_COUNT; i++) {
    379                if (block_dirty_table[i] == target_dirty_count) {//63
    380                  /* try to erase it */
    381                  ret = UBI_ReadStatus(i);
    382                } else {
    383                  /* set the next target dirty count */
    384                  if (block_dirty_table[i] < target_dirty_count
    385                      && block_dirty_table[i] > next_dirty_count) {
    386                    next_dirty_count = block_dirty_table[i];
    387                  }
    388                  continue;
    389                }
    390          
    391                if (ret == STATUS_SUCCESS) {
    392                  /* find a dirtiest block */
    393                  total_valid_page = (MAX_DIRTY_PAGES - block_dirty_table[i]);
    394                  found_block = 1;
    395                  break;
    396                }
    397              }
    398              target_dirty_count = next_dirty_count;
    399            }
    400          
    401            if (ret == STATUS_SUCCESS) {
    402              if (total_valid_page != 0) {
    403                /* copy valid pages to the reclaim block */
    404                LOG_BLOCK reclaim_block;
    405                LOG_BLOCK dirty_block;
    406                PAGE_OFF reclaim_page = 0;
    407                PAGE_OFF page;
    408          
    409                reclaim_block = PM_NODE_BLOCK(root_table.pmt_reclaim_block);
    410                dirty_block = i;
    411          
    412                ret = UBI_Read(dirty_block, PAGE_PER_PHY_BLOCK - 1, clusters, NULL);
    413                if (ret == STATUS_SUCCESS) {
    414                  for (page = 0; page < PAGE_PER_PHY_BLOCK - 1; page++) {
    415                    PMT_CLUSTER cluster = clusters[page];
    416                    PM_NODE_ADDR pm_node = root_table.page_mapping_nodes[cluster];
    417                    UINT32 cleared_cache_index = INVALID_INDEX;
    418          
    419                    /* if cached, just need to copy clean page */
    420                    if (PM_NODE_IS_CACHED(pm_node) == TRUE) {
    421                      if (PM_NODE_IS_DIRTY(pm_node) == TRUE) {
    422                        /* dirty page will be re-written by commit */
    423                        pm_node = INVALID_PM_NODE;
    424                      } else {
    425                        /* reclaim clean cached pages */
    426                        UINT32 i;
    427          
    428                        for (i = 0; i < PMT_CACHE_COUNT; i++) {
    429                          if (pm_cache_cluster[i] == cluster) {
    430                            break;
    431                          }
    432                        }
    433          
    434                        ASSERT(i != PMT_CACHE_COUNT);
    435                        pm_node = pm_cache_origin_location[i];
    436                        cleared_cache_index = i;
    437                      }
    438                    }
    439          
    440                    if (pm_node != INVALID_PM_NODE &&
    441                    PM_NODE_BLOCK(pm_node) == dirty_block &&
    442                    PM_NODE_PAGE(pm_node) == page) {
    443                      /* copy valid page to reclaim block */
    444                      ret = UBI_Read(dirty_block, page, pm_node_buffer, NULL);
    445                      if (ret == STATUS_SUCCESS) {
    446                        ret = UBI_Write(reclaim_block, reclaim_page, pm_node_buffer, NULL,
    447                        FALSE);
    448                      }
    449          
    450                      if (ret == STATUS_SUCCESS) {
    451                        /* update mapping */
    452                        PM_NODE_SET_BLOCKPAGE(root_table.page_mapping_nodes[cluster],
    453                                              reclaim_block, reclaim_page);
    454                        meta_data[reclaim_page] = cluster;
    455                        reclaim_page++;
    456          
    457                        /* clear it from cache */
    458                        if (cleared_cache_index != INVALID_INDEX) {
    459                          memset(pm_node_caches[cleared_cache_index], 0, MPP_SIZE);
    460                          pm_cache_origin_location[cleared_cache_index] =
    461                          INVALID_PM_NODE;
    462                          pm_cache_cluster[cleared_cache_index] = INVALID_CLUSTER;
    463                        }
    464                      }
    465                    }
    466                  }
    467                }
    468          
    469                /* erase dirty block, and then update journals */
    470                if (ret == STATUS_SUCCESS) {
    471                  ret = UBI_Erase(dirty_block, dirty_block);
    472                }
    473          
    474                if (ret == STATUS_SUCCESS) {
    475                  PM_NODE_SET_BLOCKPAGE(root_table.pmt_current_block, reclaim_block,
    476                                        reclaim_page);
    477                  PM_NODE_SET_BLOCKPAGE(root_table.pmt_reclaim_block, dirty_block, 0);
    478          
    479                  /* reset the BDT */
    480                  block_dirty_table[reclaim_block] = 0;
    481                  block_dirty_table[dirty_block] = 0;
    482                }
    483              } else {
    484                if (ret == STATUS_SUCCESS) {
    485                  /* the die is NOT busy */
    486                  ret = UBI_Erase(i, i);
    487                }
    488          
    489                if (ret == STATUS_SUCCESS) {
    490                  PM_NODE_SET_BLOCKPAGE(root_table.pmt_current_block, i, 0);
    491          
    492                  /* reset the BDT */
    493                  block_dirty_table[i] = 0;
    494                }
    495              }
    496            }
    497          
    498            return ret;
    499          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   PMT_Commit
        16   -> PMT_Init
        16   -> UBI_Flush
        16   -> UBI_Write
        16   -> pmt_reclaim_blocks
    2088   PMT_Format
      2088   -> FTL_Capacity
      2088   -> UBI_Write
      16   PMT_Init
        16   -> __aeabi_memset
      24   PMT_Load
        24   -> DATA_Commit
        24   -> UBI_Read
    2072   PMT_Search
      2072   -> PMT_Load
      2072   -> UBI_Read
      2072 __aeabi_uidivmod
      32   PMT_Update
        32   -> PMT_Load
        32 __aeabi_uidivmod
      40   pmt_reclaim_blocks
        40   -> UBI_Erase
        40   -> UBI_Read
        40   -> UBI_ReadStatus
        40   -> UBI_Write
        40   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
     382  PMT_Commit
     238  PMT_Format
      68  PMT_Init
     170  PMT_Load
     304  PMT_Search
     254  PMT_Update
    2048  clusters
     256  meta_data
      16  pm_cache_cluster
      16  pm_cache_origin_location
    2048  pm_node_buffer
    8192  pm_node_caches
     530  pmt_reclaim_blocks

 
 12 576 bytes in section .bss
  2 026 bytes in section .text
 
  2 026 bytes of CODE memory
 12 576 bytes of DATA memory

Errors: none
Warnings: none
