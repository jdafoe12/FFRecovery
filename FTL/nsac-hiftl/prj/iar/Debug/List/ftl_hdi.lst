###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        26/Oct/2022  20:51:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\core\ftl\ftl_hdi.c
#    Command line =  
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\core\ftl\ftl_hdi.c" -D BOOT_LEVEL_2 -lcN
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List" -o
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\prj\iar\..\..\"
#        -I "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\" --cpu_mode thumb -Ol
#        --use_c++_inline
#    List file    =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List\ftl_hdi.lst
#    Object file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj\ftl_hdi.o
#
###############################################################################

C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\core\ftl\ftl_hdi.c
      1          /*********************************************************
      2           * Module name: ftl_hdi.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Hot Data Identification
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\ubi.h>
     33          #include <sys\sys.h>
     34          #include "ftl_inc.h"
     35          
     36          //jsjpenn
     37          static UINT8 hdi_hash_table[MPP_SIZE];
     38          
     39          static PAGE_OFF hdi_current_page;
     40          static LOG_BLOCK hdi_current_block;
     41          
     42          /* TODO: choose other hash functions and parameters to optimize HDI */
     43          #define HDI_FUNCTION(a, i)          (((a)>>((i)*3))&(MPP_SIZE-1))
     44          #define HDI_FUNC_COUNT              (4)
     45          #define HDI_HOT_DATA_THERSHOLD      (0x60)
     46          #define HDI_COLDDOWN_DELAY          (0x1000)
     47          
     48          STATUS HDI_Format() {
     49            UINT32 i;
     50            STATUS ret;
     51          
     52            for (i = 0; i < MPP_SIZE; i++) {
     53              hdi_hash_table[i] = 0;
     54            }
     55          
     56            hdi_current_block = HDI_BLOCK0;//4
     57            hdi_current_page = 0;
     58          
     59            ret = UBI_Erase(hdi_current_block, hdi_current_block);
     60            if (ret == STATUS_SUCCESS) {
     61              /* write to UBI */
     62              ret = HDI_Commit();
     63            }
     64          
     65            return ret;
     66          }
     67          
     68          STATUS HDI_Init() {
     69            UINT32 i;
     70            STATUS ret = STATUS_SUCCESS;
     71            
     72            hdi_current_block = PM_NODE_BLOCK(root_table.hdi_current_journal);
     73            hdi_current_page = PM_NODE_PAGE(root_table.hdi_current_journal);
     74            
     75            //uart_printf("%s: start-hdi_current_block=%d,hdi_current_page=%d\r\n",__func__,hdi_current_block,hdi_current_page);
     76            
     77            /* read out the valid page of table */
     78            ret = UBI_Read(hdi_current_block, hdi_current_page, hdi_hash_table, NULL);
     79            ASSERT(ret == STATUS_SUCCESS);
     80          
     81            /* scan for the first erased page */
     82            for (i = hdi_current_page + 1; i < PAGE_PER_PHY_BLOCK; i++) {
     83              ret = UBI_Read(hdi_current_block, i, NULL, NULL);
     84              if (ret != STATUS_SUCCESS) {
     85                /* this page is not programmed */
     86                hdi_current_page = i;
     87                ret = STATUS_SUCCESS;
     88                break;
     89              }
     90            }
     91          
     92            if (i == PAGE_PER_PHY_BLOCK) {
     93              ASSERT(ret == STATUS_SUCCESS);
     94              /* current block is full */
     95              hdi_current_page = PAGE_PER_PHY_BLOCK;
     96            }
     97          
     98            if (ret == STATUS_SUCCESS) {
     99              /* skip one page for possible PLR issue */
    100              
    101                
    102              (void) HDI_Commit();
    103            }
    104          
    105            return ret;
    106          }
    107          
    108          BOOL HDI_IsHotPage(PGADDR addr) {
    109            static UINT32 count = 0;
    110            UINT32 i;
    111            UINT8* hot_value;
    112            BOOL ret = TRUE;
    113          
    114            /* increase all hash slots when writing the page */
    115            for (i = 0; i < HDI_FUNC_COUNT; i++) {//4
    116              hot_value = &hdi_hash_table[HDI_FUNCTION(addr, i)];
    117          
    118              if (*hot_value != MAX_UINT8) {
    119                (*hot_value)++;
    120              }
    121          
    122              if (*hot_value < HDI_HOT_DATA_THERSHOLD) {//0x60=96
    123                ret = FALSE;
    124              }
    125            }
    126          
    127            /* cold down the hash table after every XXX times of access */
    128            if (count++ == HDI_COLDDOWN_DELAY) {//4096
    129              for (i = 0; i < MPP_SIZE; i++) {
    130                hdi_hash_table[i] >>= 1;
    131              }
    132              count = 0;
    133            }
    134          
    135            return ret;
    136          }
    137          
    138          STATUS HDI_Commit() {
    139            STATUS ret = STATUS_SUCCESS;
    140            LOG_BLOCK next_block = INVALID_BLOCK;
    141          
    142            if (hdi_current_page == PAGE_PER_PHY_BLOCK) {
    143              /* write data in another block */
    144              next_block = hdi_current_block ^ 1;//即逻辑II块4和5，交替使用
    145          
    146              /* erase the block before write bdt */
    147              ret = UBI_Erase(next_block, next_block);
    148              if (ret == STATUS_SUCCESS) {
    149                hdi_current_page = 0;
    150                hdi_current_block = next_block;
    151              }
    152            }
    153          
    154            /* write BDT in ram to UBI */
    155            if (ret == STATUS_SUCCESS) {
    156              ret = UBI_Write(hdi_current_block, hdi_current_page, hdi_hash_table, NULL,FALSE);
    157            }
    158          
    159            if (ret == STATUS_SUCCESS) {
    160              PM_NODE_SET_BLOCKPAGE(root_table.hdi_current_journal, hdi_current_block,
    161                                    hdi_current_page);
    162              hdi_current_page++;
    163            }
    164          
    165            return ret;
    166          }
    167          
    168          
    169          //jsjpenn
    170          STATUS FTL_HDI_hash_table_store(){  
    171            STATUS ret;
    172            LOG_BLOCK block_to_write=FTL_reserved_START_BLOCK;//54
    173            PAGE_OFF page_to_write=0;//写在第0页  
    174           
    175            ret=UBI_Write(block_to_write, page_to_write, &hdi_hash_table, NULL, FALSE);  
    176             
    177            return ret;
    178          }
    179          
    180          STATUS FTL_HDI_hash_table_restore(){
    181            
    182            STATUS ret;
    183            LOG_BLOCK block_to_write=FTL_reserved_START_BLOCK;//54
    184            PAGE_OFF page_to_write=0;//写在第0页
    185              
    186            UINT8 tem_hdi_hash_table[MPP_SIZE];
    187            
    188            LOG_BLOCK next_block = INVALID_BLOCK;
    189            
    190            ret=UBI_Read(block_to_write, page_to_write, &tem_hdi_hash_table, NULL);
    191            
    192            if(ret == STATUS_SUCCESS) {
    193             
    194             if (hdi_current_page == PAGE_PER_PHY_BLOCK) {    
    195              next_block = hdi_current_block ^ 1;//即逻辑II块4和5，交替使用 
    196              ret = UBI_Erase(next_block, next_block);//实际是直接物理擦除，不修改MAPII
    197              if (ret == STATUS_SUCCESS) {
    198                hdi_current_page = 0;
    199                hdi_current_block = next_block;
    200              }
    201            }
    202            if (ret == STATUS_SUCCESS) {
    203              ret = UBI_Write(hdi_current_block, hdi_current_page, tem_hdi_hash_table, NULL,FALSE);
    204            }  
    205           } 
    206            return ret;
    207          }
    208          
    209          STATUS Truly_FTL_HDI_hash_table_restore(){  
    210            STATUS ret= STATUS_SUCCESS;
    211            
    212            if (ret == STATUS_SUCCESS) {
    213              PM_NODE_SET_BLOCKPAGE(root_table.hdi_current_journal, hdi_current_block,hdi_current_page);
    214              hdi_current_page++;
    215            }
    216            
    217            return ret;
    218          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    2064   FTL_HDI_hash_table_restore
      2064   -> UBI_Erase
      2064   -> UBI_Read
      2064   -> UBI_Write
       8   FTL_HDI_hash_table_store
         8   -> UBI_Write
      16   HDI_Commit
        16   -> UBI_Erase
        16   -> UBI_Write
       8   HDI_Format
         8   -> HDI_Commit
         8   -> UBI_Erase
      16   HDI_Init
        16   -> HDI_Commit
        16   -> UBI_Read
      12   HDI_IsHotPage
       4   Truly_FTL_HDI_hash_table_restore


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
     110  FTL_HDI_hash_table_restore
      24  FTL_HDI_hash_table_store
     124  HDI_Commit
      64  HDI_Format
     136  HDI_Init
     110  HDI_IsHotPage
      48  Truly_FTL_HDI_hash_table_restore
       4  count
       4  hdi_current_block
       4  hdi_current_page
    2048  hdi_hash_table

 
 2 060 bytes in section .bss
   644 bytes in section .text
 
   644 bytes of CODE memory
 2 060 bytes of DATA memory

Errors: none
Warnings: none
