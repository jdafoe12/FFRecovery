###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        26/Oct/2022  20:51:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\sys\lpc313x\bsp\spinor_bootloader.c
#    Command line =  
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\sys\lpc313x\bsp\spinor_bootloader.c" -D BOOT_LEVEL_2
#        -lcN "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List" -o
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\prj\iar\..\..\"
#        -I "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\" --cpu_mode thumb -Ol
#        --use_c++_inline
#    List file    =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List\spinor_bootloader.lst
#    Object file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj\spinor_bootloader.o
#
###############################################################################

C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\sys\lpc313x\bsp\spinor_bootloader.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2009
      6           *
      7           *    File name   : bootloader.c
      8           *    Description : lpc313x SPI bootloader - initialize SDRAM, copy image from
      9           *    SPI Flash memory to SDRAM memory and then jump to application entry point
     10           *
     11           *    History :
     12           *    1. Date        : April 4, 2009
     13           *       Author      : Stanimir Bonev
     14           *       Description : Initial revision
     15           *
     16           *    $Revision: 34106 $
     17           *
     18           **************************************************************************/
     19          
     20          #include <NXP/iolpc3130.h>
     21          #include "drv_cgu.h"
     22          #include "drv_spi.h"
     23          #include "drv_spinor.h"
     24          
     25          /** local definitions **/
     26          
     27          /*90MHz SDRAM Clock*/
     28          #define SDRAM_BASE_ADDR       0x30000000
     29          #define SDRAM_PERIOD          11.1 /*ns*/
     30          
     31          #define P2C(Period)           (((Period<SDRAM_PERIOD)?0:(Int32U)((Flo32)Period/SDRAM_PERIOD))+1)
     32          
     33          #define SDRAM_REFRESH         15625
     34          
     35          #define SDRAM_TRP             20      /*ns*/
     36          #define SDRAM_TRAS            48      /*ns*/
     37          #define SDRAM_TAPR            2       /*ns*/
     38          #define SDRAM_TWR             15      /*ns*/
     39          #define SDRAM_TRC             72      /*ns*/
     40          #define SDRAM_TRFC            80      /*ns*/
     41          #define SDRAM_TXSR            80      /*ns*/
     42          #define SDRAM_TDAL            5       /*Clocks*/
     43          #define SDRAM_TRRD            2       /*Clocks*/
     44          #define SDRAM_TMRD            2       /*Clocks*/
     45          
     46          #pragma pack(1)
     47          
     48          typedef union _Sec_level_boot_data_t {
     49            unsigned char Data[5];
     50            struct {
     51              unsigned long DestAddr;
     52              unsigned char Type;
     53            };
     54          } Sec_level_boot_data_t;
     55          
     56          #pragma pack()
     57          
     58          typedef enum _Sec_level_boot_page_type_t {
     59            REGULAR_PAGE = 0,
     60            ENCRYPTED_PAGE,
     61            INVALID_PAGE = 0xFF
     62          } Sec_level_boot_page_type_t;
     63          
     64          #define SIZE_BOOTL2_DATA                sizeof(Sec_level_boot_data_t)
     65          #define PAGES_PER_BLOCK                 8
     66          #define BOOTLOADER_L2_IMAGE_MAX_SIZE   2*PAGES_PER_BLOCK  // 16 Pages (the actual size depends of page size)
     67          
     68          void Dly_us(Int32U Dly) {
     69            Dly *= 6;
     70            Timer0Ctrl = 0;               // stop counting
     71            Timer0Load = Dly;            // load period
     72            Timer0Clear = 0;              // clear timer pending interrupt
     73            Timer0Ctrl_bit.Enable = 1;    // enable counting
     74            while (Timer0Value <= Dly)
     75              ;
     76            Timer0Ctrl_bit.Enable = 0;     // stop counting
     77          }
     78          
     79          void InitSDRAM(void) {
     80            /*Select EBI/MPMC pins*/
     81            SYSCREG_MUX_LCD_EBI_SEL_bit.Mux_LCD_EBI_sel = 1;
     82            /*Enalbe EBI Clock*/
     83            CGU_Run_Clock(EBI_CLK);
     84            /*Enable MPMC clocks*/
     85            CGU_Run_Clock(MPMC_CFG_CLK);
     86            CGU_Run_Clock(MPMC_CFG_CLK2);
     87            CGU_Run_Clock(MPMC_CFG_CLK3);
     88            /*Enable TMR0 Clock. Used for SDRAM timing*/
     89            CGU_Run_Clock(TIMER0_PCLK);
     90            /*Enable MPMC */
     91            MPMCControl = 1;
     92            /*HCLK to MPMC_CLK ratio 1:1*/
     93            MPMCConfig_bit.CLK = 0;
     94            /*Set commad, address, and data delay */
     95            SYSCREG_MPMP_DELAYMODES_bit.MPMC_delaymodes0 = 0x24;
     96            /*Set data read delay*/
     97            SYSCREG_MPMP_DELAYMODES_bit.MPMC_delaymodes1 = 0x20;
     98            /**/
     99            SYSCREG_MPMP_DELAYMODES_bit.MPMC_delaymodes2 = 0x00;
    100            /*Command Delayed strategy*/
    101            MPMCDynamicReadConfig_bit.RD = 1;
    102            /*Memory Device type SDRAM*/
    103            MPMCDynamicConfig0_bit.MD = 0;
    104            /*512Mb (32Mx16), 4 banks, row length = 13, column length = 9*/
    105            MPMCDynamicConfig0_bit.AM = 0x0D;
    106            /*Buffer Disable*/
    107            MPMCDynamicConfig0_bit.B = 0x0;
    108            /*writes not protected*/
    109            MPMCDynamicConfig0_bit.P = 0x0;
    110            /*Configure RAS latency*/
    111            MPMCDynamicRasCas0_bit.RAS = 2;
    112            /*Configure CAS latency*/
    113            MPMCDynamicRasCas0_bit.CAS = 2;
    114          
    115            MPMCDynamictRP = P2C(SDRAM_TRP);
    116            MPMCDynamictRAS = P2C(SDRAM_TRAS);
    117            MPMCDynamictSREX = P2C(SDRAM_TXSR);
    118            MPMCDynamictAPR = SDRAM_TAPR;
    119            MPMCDynamictDAL = SDRAM_TDAL + P2C(SDRAM_TRP);
    120            MPMCDynamictWR = SDRAM_TWR;
    121            MPMCDynamictRC = P2C(SDRAM_TRC);
    122            MPMCDynamictRFC = P2C(SDRAM_TRFC);
    123            MPMCDynamictXSR = P2C(SDRAM_TXSR);
    124            MPMCDynamictRRD = SDRAM_TRRD;
    125            MPMCDynamictMRD = SDRAM_TMRD;
    126            /* JEDEC General SDRAM Initialization Sequence
    127             DELAY to allow power and clocks to stabilize ~100 us
    128             NOP*/
    129            Dly_us(100);
    130          
    131            MPMCDynamicControl = 0x4183;
    132          
    133            Dly_us(200);
    134            // PALL
    135            MPMCDynamicControl_bit.I = 2;
    136          
    137            MPMCDynamicRefresh = 1;
    138          
    139            Dly_us(250);
    140          
    141            MPMCDynamicRefresh = P2C(SDRAM_REFRESH) >> 4;
    142            // COMM
    143            MPMCDynamicControl_bit.I = 1;
    144            // Burst 8, Sequential, CAS-2
    145            volatile unsigned long Dummy = *(volatile unsigned int *) (SDRAM_BASE_ADDR
    146                | (0x23UL << 12));
    147            // NORM
    148            MPMCDynamicControl = 0x4000;
    149            MPMCDynamicConfig0_bit.B = 1;
    150          }
    151          
    152          /*************************************************************************
    153           * Function Name: bootloader
    154           * Parameters: none
    155           *
    156           * Return: none
    157           *
    158           * Description: initialize SDRAM, copy image from
    159           *    SPI Flash memory to SDRAM memory and then jump to application entry poin
    160           *
    161           *************************************************************************/
    162          __arm void bootloader(void) {
    163          
    164            union {
    165              unsigned char Data[4];
    166              unsigned int * pDest;
    167            } Addr;
    168            unsigned int * pSrc;
    169            unsigned int pageSize;
    170            unsigned int pageNum;
    171            unsigned int memoryPage;
    172            unsigned int RepPageSize;
    173            unsigned int TablePage;
    174            unsigned int TablePageOffset;
    175            unsigned char buffer[2112 / sizeof(unsigned int)];
    176            unsigned char Table[2048 / sizeof(unsigned int)];
    177          
    178            /*Init Clocks*/
    179            InitClock();
    180            /*SDRAM initialization*/
    181            InitSDRAM();
    182            /*SPI NOR initialization*/
    183            if (InitSPINOR()) {
    184              while (1)
    185                ;
    186            }
    187          
    188            RepPageSize = pageSize = SPINOR_GetPageSize();
    189            pageNum = SPINOR_GetPageNum();
    190          
    191            memoryPage = BOOTLOADER_L2_IMAGE_MAX_SIZE;
    192            RepPageSize &= ~0xFFUL;
    193          
    194            if (0 == (0xFF & pageSize)) {
    195              // "binary" page size layout
    196              TablePageOffset = 0;
    197              TablePage = memoryPage;
    198              memoryPage++;
    199              SPINOR_Read_Page(TablePage, Table);
    200            }
    201          
    202            SPINOR_Read_Page(memoryPage, (Int8U *) buffer);
    203          
    204            while (1) {
    205              Sec_level_boot_data_t * Boot_data;
    206          
    207              if (0 == (0xFF & pageSize)) {
    208                Boot_data = (Sec_level_boot_data_t *) &Table[TablePageOffset];
    209                /*Check for valid data*/
    210                if (REGULAR_PAGE != Boot_data->Type)
    211                  return;
    212                /*Copy Dest Address*/
    213                for (int i = 0; 4 > i; i++) {
    214                  Addr.Data[i] = Boot_data->Data[i];
    215                }
    216          
    217                pSrc = (unsigned int *) buffer;
    218                /*Copy Data*/
    219                for (unsigned int i = 0; RepPageSize > i; i += sizeof(unsigned int)) {
    220                  *Addr.pDest++ = *pSrc++;
    221                }
    222                /**/
    223                TablePageOffset += SIZE_BOOTL2_DATA;
    224                /**/
    225                if ((pageSize - SIZE_BOOTL2_DATA) < TablePageOffset) {
    226                  TablePageOffset = 0;
    227                  TablePage = ++memoryPage;
    228                  /*Read new address table*/
    229                  SPINOR_Read_Page(TablePage, Table);
    230                }
    231              } else {
    232                Boot_data = (Sec_level_boot_data_t *) &buffer[pageSize - 5];
    233                /*Check for valid data*/
    234                if (REGULAR_PAGE != Boot_data->Type)
    235                  return;
    236                /*Copy Data*/
    237                for (int i = 0; 4 > i; i++) {
    238                  Addr.Data[i] = Boot_data->Data[i];
    239                }
    240          
    241                //pSrc = (unsigned int *) (Boot_data->DestAddr);
    242                pSrc = (unsigned int *) buffer;
    243          
    244                for (unsigned int i = 0; RepPageSize > i; i += sizeof(unsigned int)) {
    245                  *Addr.pDest++ = *pSrc++;
    246                }
    247              }
    248          
    249              if (++memoryPage >= pageNum)
    250                return;
    251          
    252              SPINOR_Read_Page(memoryPage, (Int8U *) buffer);
    253            }
    254          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   Dly_us
       8   InitSDRAM
         8   -> CGU_Run_Clock
         8   -> Dly_us
    1072   bootloader
      1072   -> InitClock
      1072   -> InitSDRAM
      1072   -> InitSPINOR
      1072   -> SPINOR_GetPageNum
      1072   -> SPINOR_GetPageSize
      1072   -> SPINOR_Read_Page


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_31
       4  ??DataTable1_32
       4  ??DataTable1_33
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      56  Dly_us
     378  InitSDRAM
       4  Timer0Clear
       4  Timer0Load
       4  Timer0Value
       4  _A_MPMCConfig
       4  _A_MPMCControl
       4  _A_MPMCDynamicConfig0
       4  _A_MPMCDynamicControl
       4  _A_MPMCDynamicRasCas0
       4  _A_MPMCDynamicReadConfig
       4  _A_MPMCDynamicRefresh
       4  _A_MPMCDynamictAPR
       4  _A_MPMCDynamictDAL
       4  _A_MPMCDynamictMRD
       4  _A_MPMCDynamictRAS
       4  _A_MPMCDynamictRC
       4  _A_MPMCDynamictRFC
       4  _A_MPMCDynamictRP
       4  _A_MPMCDynamictRRD
       4  _A_MPMCDynamictSREX
       4  _A_MPMCDynamictWR
       4  _A_MPMCDynamictXSR
       4  _A_SYSCREG_MPMP_DELAYMODES
       4  _A_SYSCREG_MUX_LCD_EBI_SEL
       4  _A_Timer0Ctrl
     404  bootloader

 
  96 bytes in section .noinit (abs)
 974 bytes in section .text
 
 974 bytes of CODE memory
   0 bytes of DATA memory (+ 96 bytes shared)

Errors: none
Warnings: none
