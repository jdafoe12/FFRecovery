###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        26/Oct/2022  20:51:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\sys\lpc313x\main.c
#    Command line =  
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\sys\lpc313x\main.c" -D BOOT_LEVEL_2 -lcN
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List" -o
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\prj\iar\..\..\"
#        -I "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\" --cpu_mode thumb -Ol
#        --use_c++_inline
#    List file    =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List\main.lst
#    Object file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj\main.o
#
###############################################################################

C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\sys\lpc313x\main.c
      1          /*************************************************************************
      2          *
      3          *   Used with ICCARM and AARM.
      4          *
      5          *    (c) Copyright IAR Systems 2009
      6          *
      7          *    File name   : main.c
      8          *    Description :
      9          *
     10          *
     11          *COMPATIBILITY
     12          *=============
     13          *
     14          *   The USB Mass storage example project is compatible with Embedded Artsists
     15          *  LPC313x evaluation board. By default the project is configured to use the
     16          *  J-Link JTAG interface.
     17          *
     18          *CONFIGURATION
     19          *=============
     20          *
     21          *  The Project contains the following configurations:
     22          *
     23          *  Debug: run in iRAM
     24          *
     25          *
     26          *    History :
     27          *    1. Date        : 22.8.2009
     28          *       Author      : Stanimir Bonev
     29          *       Description : initial revision.
     30          *
     31          *    $Revision: 32285 $
     32          **************************************************************************/
     33          
     34          /** include files **/
     35          #include "includes.h"
     36          
     37          #include <NXP/iolpc3131.h>
     38          #include <stdio.h>
     39          #include <string.h>
     40          #include "arm926ej_cp15_drv.h"
     41          #include "arm_comm.h"
     42          #include "drv_spi.h"
     43          #include "drv_spinor.h"
     44          #include "drv_intc.h"
     45          #include "math.h"
     46          
     47          #include "lpc313x_timer_driver.h"
     48          #include "lpc313x_usbotg.h"
     49          #include "lpc313x_usbd_driver.h"
     50          #include "lpc313x_chip.h"
     51          #include "mscuser.h"
     52          #include "usbcore.h"
     53          #include "usbhw.h"
     54          
     55          #include <onfm.h>
     56          #include <core\inc\cmn.h>
     57          #include <core\inc\buf.h>
     58          #include <core\inc\mtd.h>
     59          //#include <core\polar\include\polarssl\aes.h>
     60          
     61          //jsjpenn
     62          #include  <core\inc\ubi.h>//在main.c中输出调试信息
     63          
     64          #define SDRAM_BASE_ADDR 0x30000000
     65          #define SDRAM_SIZE      0x02000000
     66          
     67          /** external functions **/
     68          extern void InitSDRAM(void);
     69          
     70          /** internal functions **/
     71          extern void USB_EndPoint0 (UNS_32 event);
     72          
     73          
     74          #pragma data_alignment=DMA_BURST_BYTES
     75          unsigned char sector_buffer[SECTOR_SIZE];
     76          
     77          #pragma data_alignment=DMA_BURST_BYTES
     78          unsigned char read_sector_buffer[SECTOR_SIZE];
     79          
     80          #pragma data_alignment=DMA_BURST_BYTES
     81          UINT8 write_page_buffer[MPP_SIZE];
     82          #pragma data_alignment=DMA_BURST_BYTES
     83          UINT8 read_page_buffer[MPP_SIZE];
     84          
     85          #define ISROM_MMU_TTBL              (0x1201C000)
     86          #define USER_SPACE_SECTOR_COUNT     (ONFM_Capacity())
     87          
     88          
     89          //jsjpenn
     90          int g_state = 1;
     91          int g_ReceiveCommandNum = 0;
     92          UINT32 g_IdleCcount=0;
     93          
     94          //JD
     95          int ftl_read_state = 0;
     96          
     97          
     98          
     99          /***********************************************************************
    100          *
    101          * Function: USB_Reset_Event
    102          *
    103          * Purpose: USB Reset Event Callback
    104          *
    105          * Processing:
    106          *     Called automatically on USB Reset Event.
    107          *
    108          * Parameters: None
    109          *
    110          * Outputs: None
    111          *
    112          * Returns: Nothing
    113          *
    114          * Notes: None
    115          *
    116          ***********************************************************************/
    117          void USB_Reset_Event(void)
    118          {
    119            USB_ResetCore();
    120          }
    121          
    122          #if USB_CONFIGURE_EVENT
    123          /***********************************************************************
    124          *
    125          * Function: USB_Configure_Event
    126          *
    127          * Purpose: USB Configure Event Callback
    128          *
    129          * Processing:
    130          *     Called automatically on USB configure Event.
    131          *
    132          * Parameters: None
    133          *
    134          * Outputs: None
    135          *
    136          * Returns: Nothing
    137          *
    138          * Notes: None
    139          *
    140          ***********************************************************************/
    141          void USB_Configure_Event (void)
    142          {
    143            
    144          }
    145          #endif
    146          
    147          /***********************************************************************
    148          *
    149          * Function: USB_EndPoint1
    150          *
    151          * Purpose: USB Endpoint 1 Event Callback
    152          *
    153          * Processing:
    154          *     Called automatically on USB Endpoint 1 Event
    155          *
    156          * Parameters: None
    157          *
    158          * Outputs: None
    159          *
    160          * Returns: Nothing
    161          *
    162          * Notes: None
    163          *
    164          ***********************************************************************/
    165          void USB_EndPoint1 (UNS_32 event)
    166          {
    167            switch (event)
    168            {
    169            case USB_EVT_OUT_NAK:
    170              MSC_BulkOutNak();
    171              break;
    172            case USB_EVT_OUT:
    173              MSC_BulkOut();
    174              break;
    175            case USB_EVT_IN_NAK:
    176              MSC_BulkInNak();
    177              break;
    178            case USB_EVT_IN:
    179              MSC_BulkIn();
    180              break;
    181            }
    182          }
    183          
    184          
    185          static void init_usb()
    186          {
    187            LPC_USBDRV_INIT_T usb_cb;
    188            
    189            // Enable USB interrupts
    190            // Install Interrupt Service Routine, Priority
    191            INTC_IRQInstall(USB_ISR, IRQ_USB, USB_INTR_PRIORITY,0);
    192            
    193            /* initilize call back structures */
    194            memset((void*)&usb_cb, 0, sizeof(LPC_USBDRV_INIT_T));
    195            usb_cb.USB_Reset_Event = USB_Reset_Event;
    196            usb_cb.USB_P_EP[0] = USB_EndPoint0;
    197            usb_cb.USB_P_EP[1] = USB_EndPoint1;
    198            usb_cb.ep0_maxp = USB_MAX_PACKET0;
    199            /* USB Initialization */
    200            USB_Init(&usb_cb);
    201          }
    202          
    203          //jsjpenn
    204          static void usb_user_task_loop()
    205          {  
    206            //jsjpenn
    207            int ret=0;
    208            int icount=0;  
    209            
    210            int pop;   
    211            while (1)
    212            {
    213              pop = ut_pop;
    214              //push = ut_push;
    215              //if (ut_pop != ut_push)
    216              if (pop != ut_push)
    217              {
    218                if (ut_list[pop].type == UT_WRITE)
    219                {
    220                  LED_SET(LED2);         
    221                 
    222                  //jsjpenn
    223                  ret=ONFM_Write(ut_list[pop].offset,
    224                             ut_list[pop].length,
    225                             ut_list[pop].buffer);         
    226                  
    227                  
    228                  LED_CLR(LED2);        
    229                }
    230                else if (ut_list[pop].type == UT_READ)
    231                {
    232                  if (Read_BulkLen == 0)
    233                  {
    234                    LED_SET(LED1);
    235          
    236                    ONFM_Read(ut_list[pop].offset,
    237                              ut_list[pop].length,
    238                              ut_list[pop].buffer);
    239                    
    240                    LED_CLR(LED1);
    241                    
    242                    /* tell the IN NAK INT the buffer is ready to prime */
    243                    Read_BulkLen = (ut_list[pop].length)*MSC_BlockSize;
    244                  }
    245                }
    246                else
    247                {
    248                  ASSERT(ut_list[pop].type == UT_MERGE);
    249                  
    250                  if (merge_stage == MERGE_START)
    251                  {
    252                    ONFM_Read(ut_list[pop].offset,
    253                              ut_list[pop].length,
    254                              ut_list[pop].buffer);
    255                    
    256                    merge_stage = MERGE_FINISH;
    257                  }
    258                }
    259                
    260                /* next write operation */
    261                ut_pop = (ut_pop+1)%UT_LIST_SIZE;
    262              }
    263              
    264              //jsjpenn
    265              else{      
    266          //      //系统空闲时间增加 
    267          //      g_IdleCcount++;
    268          //      icount++;
    269          //      if(icount>200000){
    270          //        //uart_printf("N=%d",g_IdleCcount/200000); //输出调试时间信息
    271          //        icount=0;
    272          //      }
    273          //      
    274          //      if(g_state==1){
    275          //        //测试ransom在桌面没有文件-加密5M文件时用-100000000
    276          //        //平台恢复-写入要lock的300MB文件用160000000
    277          //        if(g_IdleCcount>20000000){          
    278          //          ret=Start_change_state();          
    279          //          if(ret==STATUS_Remount){
    280          //            break;//跳出while死循环          
    281          //          }        
    282          //        }
    283          //      }
    284          //      
    285          //      if(g_state==2){
    286          //        //测试ransom在桌面没有文件-加密5M文件时用-500000000
    287          //        //平台恢复-恢复写入的300MB文件用（再写5M数据）-40000000
    288          //        if(g_IdleCcount>20000000){          
    289          //          ret=Start_change_state();                   
    290          //          if(ret==STATUS_Remount){
    291          //            break;//跳出while死循环          
    292          //          }        
    293          //        }
    294          //      }
    295              }
    296              //jsjpennend   
    297              
    298            }
    299          }
    300          
    301          static void SDRAM_Test(void)
    302          {
    303            char s[64];
    304            sprintf(s,"\n\rStart SDRAM Test\n\r");  
    305            UartWrite((unsigned char *)s,strlen(s));
    306          
    307            /*32bit access test*/
    308            sprintf(s,"32-bits write\n\r");
    309            UartWrite((unsigned char *)s,strlen(s));
    310            /*Start from stram base address*/
    311            volatile unsigned int * uint_dest = (unsigned int *)SDRAM_BASE_ADDR;
    312            for(int i = 0; i < SDRAM_SIZE/sizeof(int); i++,uint_dest++)
    313            {
    314              /*32-bits write*/
    315              * uint_dest = i;
    316            }
    317            /*32-bits verify*/
    318            sprintf(s,"32-bits verify\n\r");
    319            UartWrite((unsigned char *)s,strlen(s));
    320          
    321            uint_dest = (unsigned int *)SDRAM_BASE_ADDR;
    322            for(int i = 0; i < SDRAM_SIZE/sizeof(int); i++,uint_dest++)
    323            {
    324              /*32-bits read*/
    325              if (* uint_dest != i)
    326              {
    327                /*verify error*/
    328                sprintf(s,"SDRAM 32-bits R/W Error at address %0x\n\r",(unsigned int)uint_dest);
    329                UartWrite((unsigned char *)s,strlen(s));
    330                break;
    331              }
    332            }
    333            
    334            /*16-bits access test*/
    335            sprintf(s,"16-bits write\n\r");
    336            UartWrite((unsigned char *)s,strlen(s));
    337            /*Start from stram base address*/
    338            volatile unsigned short * ushrt_dest = (unsigned short *)SDRAM_BASE_ADDR;
    339            for(int i = 0; i < SDRAM_SIZE/sizeof(short); i++,ushrt_dest++)
    340            {
    341              /*16-bits write*/
    342              *ushrt_dest = (i^(i>>16));
    343            }
    344            /*16-bits verify*/
    345            sprintf(s,"16-bits verify\n\r");
    346            UartWrite((unsigned char *)s,strlen(s));
    347          
    348            ushrt_dest = (unsigned short *)SDRAM_BASE_ADDR;
    349            for(int i = 0; i < SDRAM_SIZE/sizeof(short); i++,ushrt_dest++)
    350            {
    351              /*16-bits read*/
    352              if ( *ushrt_dest != ((i^(i>>16))&0xFFFF))
    353              {
    354                /*verify error*/
    355                sprintf(s,"SDRAM 16-bits R/W Error at address 0x%0x\n\r",(unsigned int)ushrt_dest);
    356                UartWrite((unsigned char *)s,strlen(s));
    357                break;
    358              }
    359            }
    360            
    361            /*8-bits access test*/
    362            sprintf(s,"8-bits write\n\r");
    363            UartWrite((unsigned char *)s,strlen(s));
    364            /*Start from stram base address*/
    365            volatile unsigned char * uchar_dest = (unsigned char *)SDRAM_BASE_ADDR;
    366            for(int i = 0; i < SDRAM_SIZE; i++,uchar_dest++)
    367            {
    368              /*16-bits write*/
    369              *uchar_dest = i^(i>>8);
    370            }
    371            /*8-bits verify*/
    372            sprintf(s,"8-bits verify\n\r");
    373            UartWrite((unsigned char *)s,strlen(s));
    374          
    375            uchar_dest = (unsigned char *)SDRAM_BASE_ADDR;
    376            for(int i = 0; i < SDRAM_SIZE; i++,uchar_dest++)
    377            {
    378              /*8-bits read*/
    379              if ( *uchar_dest != ((i^(i>>8))&0xFF))
    380              {
    381                /*verify error*/
    382                sprintf(s,"SDRAM 8-bits R/W Error at address %0x\n\r",(unsigned int)ushrt_dest);
    383                UartWrite((unsigned char *)s,strlen(s));
    384                break;
    385              }
    386            }
    387          
    388            sprintf(s,"SDRAM Test end\n\r");  
    389            UartWrite((unsigned char *)s,strlen(s));
    390          
    391          }
    392          
    393          /*************************************************************************
    394          * Function Name: main
    395          * Parameters: None
    396          *
    397          * Return: None
    398          *
    399          * Description: Getting Started main loop
    400          *
    401          *************************************************************************/
    402          void main(void)
    403          {
    404            //jsjpenn    
    405          loop: 
    406            int onfm_ret = 0;
    407          #if 0 //注释掉调试用的代码 #if 1就是将注释去掉
    408            CP15_Mmu(FALSE);            // Disable MMU
    409            CP15_ICache(TRUE);          // Enable ICache
    410          
    411            CP15_SysProt(FALSE);
    412            CP15_RomProt(TRUE);
    413            CP15_SetTtb((Int32U *)ISROM_MMU_TTBL);  //Set translation table base address
    414            CP15_SetDomain( (DomainManager << 2*1) | (DomainClient << 0)); // Set domains
    415            CP15_Mmu(TRUE);             // Enable MMU
    416            CP15_Cache(TRUE);           // Enable ICache,DCache
    417          #endif  
    418            
    419          #ifndef BOOT_LEVEL_2
    420            InitClock();
    421            InitSDRAM();
    422            InitSPINOR();
    423          #endif
    424          
    425            // Uncomment for SDRAM experiment.
    426             InitSDRAM();
    427          
    428            /* TODO:
    429            * - test DMA copy in SDRAM w/ and w/o clock enable.
    430            * - test USB RAMDisk speed
    431            * - test mtd speed
    432            * - test ONFM-USB
    433            * - debug, use K9HAG.
    434            */
    435            
    436            /*Init Interrupt Controller.
    437            Arm Vector Copy to beginnint of the IRAM*/
    438            INTC_Init((Int32U *)ISRAM_ESRAM0_BASE);
    439            /*Remap IRAM at address 0*/
    440            SYSCREG_ARM926_901616_LP_SHADOW_POINT = ISRAM_ESRAM0_BASE;
    441            
    442            init_usb();
    443            
    444           
    445            
    446            //jsj修改
    447            //原来是只执行ONFM_Mount()，若成功就不执行ONFM_Format()了，使得不必每次下载完代码都需要格式化文件系统
    448            //现在改成先执行ONFM_Format()，再执行ONFM_Mount()，这样每次下载完代码都需要格式化文件系统
    449            
    450            // init ONFM
    451            //onfm_ret = ONFM_Mount();
    452            
    453            
    454            //jsjpenn
    455            if(g_state== 1)
    456            {
    457              onfm_ret = -1;
    458            }else{
    459              onfm_ret = ONFM_Mount();
    460            }
    461            
    462            if (onfm_ret != 0) {
    463              /* init failed, try to format */
    464              onfm_ret = ONFM_Format();
    465              if (onfm_ret == 0) {
    466                onfm_ret = ONFM_Mount();
    467              }
    468            }
    469            
    470            
    471            if (onfm_ret == 0) {
    472              MSC_Init();  //jsjpenn会调用FTL_Capacity()  
    473             
    474              INTC_IntEnable(IRQ_USB, 1);
    475              __enable_irq();    
    476              /* wait */
    477              timer_wait_ms(NULL, 10);     
    478              
    479              /* USB Connect */
    480              USB_Connect(TRUE);
    481            }  
    482            
    483            if(g_state== 1)
    484            {
    485              uart_printf("%s: State 1 is ready, start to fotmat file system\r\n",__func__);
    486            }else{
    487              uart_printf("%s: State 2 is ready, we can start to test malware\r\n",__func__);
    488            }  
    489            
    490            //jsj 运行到此时提示格式化文件系统 
    491            
    492            /* main loop to handle usb read/write tasks in USER SPACE */
    493            usb_user_task_loop();   
    494           
    495                
    496            /* TODO: call unmount to flush and check program status
    497             periodly after a long time delay. Avoid PLR or unsafe plug-out  */
    498            ONFM_Unmount();
    499            
    500            //jsjpenn
    501            uart_printf("%s: Unmount done \r\n",__func__); 
    502            
    503            goto loop; 
    504           
    505            /* TODO: use watchdog timer, to reset system */
    506          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   USB_Configure_Event
       8   USB_EndPoint1
         8   -> MSC_BulkIn
         8   -> MSC_BulkInNak
         8   -> MSC_BulkOut
         8   -> MSC_BulkOutNak
       8   USB_Reset_Event
         8   -> USB_ResetCore
      72   init_usb
        72   -> INTC_IRQInstall
        72   -> USB_Init
        72   -> __aeabi_memset
       8   main
         8   -> INTC_Init
         8   -> INTC_IntEnable
         8   -> InitSDRAM
         8   -> MSC_Init
         8   -> ONFM_Format
         8   -> ONFM_Mount
         8   -> ONFM_Unmount
         8   -> USB_Connect
         8   -> init_usb
         8   -> timer_wait_ms
         8   -> uart_printf
         8   -> usb_user_task_loop
         8 __iar_enable_irq
      40   printint
        40   -> UartWrite
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      56   printuint
        56   -> UartWrite
        56 __aeabi_uidiv
        56 __aeabi_uidivmod
      40   uart_printf
        40   -> UartWrite
        40   -> printint
        40   -> printuint
       8   usb_user_task_loop
         8   -> ONFM_Read
         8   -> ONFM_Write
         8 __aeabi_uidivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       8  ?_0
      52  ?_1
      56  ?_2
      20  ?_3
       4  SYSCREG_ARM926_901616_LP_SHADOW_POINT
       2  USB_Configure_Event
      44  USB_EndPoint1
       8  USB_Reset_Event
       4  _A_IOCONF_GPIO_M0_CLR
       4  _A_IOCONF_GPIO_M0_SET
       4  _A_IOCONF_GPIO_M1_SET
      20  digits
      20  digits
       4  ftl_read_state
       4  g_IdleCcount
       4  g_ReceiveCommandNum
       4  g_state
      54  init_usb
     136  main
     104  printint
      64  printuint
    2048  read_page_buffer
     512  read_sector_buffer
     512  sector_buffer
     210  uart_printf
     284  usb_user_task_loop
    2048  write_page_buffer
      24  -- Other

 
 5 132 bytes in section .bss
    44 bytes in section .data
    16 bytes in section .noinit (abs)
   144 bytes in section .rodata
 1 010 bytes in section .text
 
   994 bytes of CODE  memory (+ 16 bytes shared)
   144 bytes of CONST memory
 5 176 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: 4
