###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        26/Oct/2022  20:51:01
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\sys\lpc313x\lib\lpc313x_timer_driver.c
#    Command line =  
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\sys\lpc313x\lib\lpc313x_timer_driver.c" -D
#        BOOT_LEVEL_2 -lcN "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List" -o
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\prj\iar\..\..\"
#        -I "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\" -I
#        "C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\" --cpu_mode thumb -Ol
#        --use_c++_inline
#    List file    =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\List\lpc313x_timer_driver.lst
#    Object file  =  
#        C:\Users\niusenc\Desktop\recovery -
#        Copy\nsac-hiftl\prj\iar\Debug\Obj\lpc313x_timer_driver.o
#
###############################################################################

C:\Users\niusenc\Desktop\recovery - Copy\nsac-hiftl\sys\lpc313x\lib\lpc313x_timer_driver.c
      1          /***********************************************************************
      2           * $Id:: lpc313x_timer_driver.c 1355 2008-11-25 00:31:05Z pdurgesh     $
      3           *
      4           * Project: LPC313x timer driver
      5           *
      6           * Description:
      7           *     This file contains driver support for the LPC313x timer.
      8           *
      9           ***********************************************************************
     10           * Software that is described herein is for illustrative purposes only
     11           * which provides customers with programming information regarding the
     12           * products. This software is supplied "AS IS" without any warranties.
     13           * NXP Semiconductors assumes no responsibility or liability for the
     14           * use of the software, conveys no license or title under any patent,
     15           * copyright, or mask work right to the product. NXP Semiconductors
     16           * reserves the right to make changes in the software without
     17           * notification. NXP Semiconductors also make no representation or
     18           * warranty that such application will be suitable for the specified
     19           * use without further testing or modification.
     20           *********************************************************************/
     21          
     22          #include "lpc313x_timer_driver.h"
     23          #include "lpc313x_cgu_driver.h"
     24          
     25          /***********************************************************************
     26           * Timer driver package data
     27          ***********************************************************************/
     28          
     29          /* Timer device configuration structure type */
     30          typedef struct
     31          {
     32             UNS_8 id;
     33             BOOL_8 init;
     34             UNS_8 clk_id;
     35             UNS_8 reset_id;
     36             TIMER_REGS_T *regptr;
     37          } TIMER_CFG_T;
     38          
     39          /* Timer driver data */
     40          static TIMER_CFG_T g_tmr_cfg [4] =
     41          {
     42             {0, 0, (UNS_8)CGU_SB_TIMER0_PCLK_ID, (UNS_8)TIMER0_PNRES_SOFT, TIMER_CNTR0},
     43             {1, 0, (UNS_8)CGU_SB_TIMER1_PCLK_ID, (UNS_8)TIMER1_PNRES_SOFT, TIMER_CNTR1},
     44             {2, 0, (UNS_8)CGU_SB_TIMER2_PCLK_ID, (UNS_8)TIMER2_PNRES_SOFT, TIMER_CNTR2},
     45             {3, 0, (UNS_8)CGU_SB_TIMER3_PCLK_ID, (UNS_8)TIMER3_PNRES_SOFT, TIMER_CNTR3}
     46          };
     47          
     48          /***********************************************************************
     49           * Timer driver private functions
     50           **********************************************************************/
     51          /***********************************************************************
     52           *
     53           * Function: timer_ptr_to_timer_num
     54           *
     55           * Purpose: Convert a timer register pointer to a timer number
     56           *
     57           * Processing:
     58           *     See function.
     59           *
     60           * Parameters:
     61           *     pTimer : Pointer to a timer register set
     62           *
     63           * Outputs: None
     64           *
     65           * Returns: The timer number (0 to 3) or -1 if register pointer is bad
     66           *
     67           * Notes: None
     68           *
     69           **********************************************************************/
     70          INT_32 timer_ptr_to_timer_num(TIMER_REGS_T *pTimer)
     71          {
     72             INT_32 tnum = -1;
     73          
     74             if (pTimer == TIMER_CNTR0)
     75             {
     76                tnum = 0;
     77             }
     78             else if (pTimer == TIMER_CNTR1)
     79             {
     80                tnum = 1;
     81             }
     82             else if (pTimer == TIMER_CNTR2)
     83             {
     84                tnum = 2;
     85             }
     86             else if (pTimer == TIMER_CNTR3)
     87             {
     88                tnum = 3;
     89             }
     90          
     91             return tnum;
     92          }
     93          
     94          /***********************************************************************
     95           *
     96           * Function: timer_usec_to_val
     97           *
     98           * Purpose: Convert a time to a timer count value
     99           *
    100           * Processing:
    101           *     See function.
    102           *
    103           * Parameters:
    104           *     clk_id : Timer clock ID
    105           *     usec   : Time in microseconds
    106           *
    107           * Outputs: None
    108           *
    109           * Returns: The number of required clock ticks to give the time delay
    110           *
    111           * Notes: None
    112           *
    113           **********************************************************************/
    114          UNS_32 timer_usec_to_val(CGU_CLOCK_ID_T clk_id, UNS_32 usec, UNS_32* pcon)
    115          {
    116             UNS_64 clkdlycnt;
    117             UNS_64 freq;
    118          
    119             /* Determine the value to exceed before the count reaches the desired
    120                delay time */
    121             freq = (UNS_64)cgu_get_clk_freq(clk_id);
    122             if ((freq > 1000000) && (pcon != NULL))
    123             {
    124                /* if timer freq is greater than 1MHz use pre-dividers */
    125                *pcon &= ~TM_CTRL_PS_MASK;
    126                if (usec > 100000)
    127                {
    128                   /* use divide by 256 pre-divider for delay greater than 100 msec*/
    129                   *pcon |= TM_CTRL_PS256;
    130                   /* divide by 256 */
    131                   freq = freq >> 8;
    132                }
    133                else if (usec > 1000)
    134                {
    135                   /* use divide by 16 pre-divider for delay greater than 1 msec*/
    136                   *pcon |= TM_CTRL_PS16;
    137                   /* divide by 16 */
    138                   freq = freq >> 4;
    139                }
    140             }
    141          
    142             clkdlycnt =	((freq * (UNS_64)usec) / 1000000);
    143          
    144             return (UNS_32)clkdlycnt;
    145          }
    146          
    147          /***********************************************************************
    148           *
    149           * Function: timer_delay_cmn
    150           *
    151           * Purpose: Delay for a period of microseconds
    152           *
    153           * Processing:
    154           *     See function.
    155           *
    156           * Parameters:
    157           *     pTimer: Pointer to timer register set to use
    158           *     usec  :  the delay time in microseconds
    159           *
    160           * Outputs: None
    161           *
    162           * Returns: The clock rate of the timer in Hz, or 0 if invalid
    163           *
    164           * Notes: None
    165           *
    166           **********************************************************************/
    167          void timer_delay_cmn(TIMER_REGS_T* pTimerRegs, UNS_32 usec)
    168          {
    169             UNS_32 control = 0;
    170             UNS_32 clkdlycnt;
    171             TIMER_CFG_T *pTimer = NULL;
    172             INT_32 tnum = timer_ptr_to_timer_num(pTimerRegs);
    173          
    174             /* check if valid regs pointer is passed. If not find a free timer.*/
    175             if (tnum < 0)
    176             {
    177                tnum = 3;
    178                while (tnum >= 0)
    179                {
    180                   if (g_tmr_cfg[tnum].init == FALSE)
    181                      break;
    182          
    183                   tnum--;
    184                }
    185             }
    186             /* no timer is free so simply return */
    187             if (tnum < 0)
    188             {
    189                return;
    190             }
    191          
    192             /* get timer device config structure */
    193             pTimer = &g_tmr_cfg[tnum];
    194          
    195             /* Enable timer system clock */
    196             cgu_clk_en_dis((CGU_CLOCK_ID_T)pTimer->clk_id, 1);
    197          
    198             /* Determine the value to exceed before the count reaches the desired
    199                delay time */
    200             clkdlycnt = timer_usec_to_val((CGU_CLOCK_ID_T)pTimer->clk_id, usec, &control);
    201          
    202             /* Reset timer */
    203             pTimer->regptr->control &= ~TM_CTRL_ENABLE;
    204             pTimer->regptr->load = clkdlycnt;
    205          
    206             /* Enable the timer in free running mode*/
    207             pTimer->regptr->control = control | TM_CTRL_ENABLE;
    208          
    209             /* Loop until terminal count matches or exceeds computed delay count */
    210             while (pTimer->regptr->value <= clkdlycnt);
    211          
    212             /* Disable timer system clock */
    213             cgu_clk_en_dis((CGU_CLOCK_ID_T)pTimer->clk_id, 0);
    214          
    215             /* Stop timer */
    216             pTimer->regptr->control &= ~TM_CTRL_ENABLE;
    217          }
    218          
    219          /***********************************************************************
    220           * Timer driver public functions
    221           **********************************************************************/
    222          
    223          /***********************************************************************
    224           *
    225           * Function: timer_open
    226           *
    227           * Purpose: Open the timer
    228           *
    229           * Processing:
    230           *     See function.
    231           *
    232           * Parameters:
    233           *     ipbase: Pointer to a timer peripheral block
    234           *     arg   : Not used
    235           *
    236           * Outputs: None
    237           *
    238           * Returns: The pointer to a timer config structure or NULL
    239           *
    240           * Notes: None
    241           *
    242           **********************************************************************/
    243          INT_32 timer_open(void *ipbase,
    244                            INT_32 arg)
    245          {
    246             TIMER_CFG_T *pTimer;
    247             INT_32 tnum, tptr = (INT_32) NULL;
    248          
    249             /* Try to find a matching timer number based on the pass pointer */
    250             tnum = timer_ptr_to_timer_num((TIMER_REGS_T *) ipbase);
    251             if (tnum >= 0)
    252             {
    253                pTimer = &g_tmr_cfg[tnum];
    254                /* Has the timer been previously initialized? */
    255                if (pTimer->init == FALSE)
    256                {
    257                   /* Timer is free */
    258                   pTimer->init = TRUE;
    259                   pTimer->regptr = (TIMER_REGS_T *) ipbase;
    260          
    261                   /* Enable timer system clock */
    262                   cgu_clk_en_dis((CGU_CLOCK_ID_T)pTimer->clk_id, 1);
    263          
    264                   /* Setup default timer state as standard timer mode, timer
    265                      disabled and all match and counters disabled */
    266                   cgu_soft_reset_module((CGU_MOD_ID_T)pTimer->reset_id);
    267                   /*
    268                   pTimer->regptr->control &= ~TM_CTRL_ENABLE;
    269                   pTimer->regptr->clear = 1;
    270                   pTimer->regptr->load = 0;
    271                   */
    272                   /* Return pointer to specific timer structure */
    273                   tptr = (INT_32) pTimer;
    274                }
    275             }
    276          
    277             return tptr;
    278          }
    279          
    280          /***********************************************************************
    281           *
    282           * Function: timer_close
    283           *
    284           * Purpose: Close the timer
    285           *
    286           * Processing:
    287           *     If init is not TRUE, then return _ERROR to the caller as the
    288           *     device was not previously opened. Otherwise, disable the timers,
    289           *     set init to FALSE, and return _NO_ERROR to the caller.
    290           *
    291           * Parameters:
    292           *     devid: Pointer to timer config structure
    293           *
    294           * Outputs: None
    295           *
    296           * Returns: The status of the close operation
    297           *
    298           * Notes: None
    299           *
    300           **********************************************************************/
    301          LPC_STATUS timer_close(INT_32 devid)
    302          {
    303             TIMER_CFG_T *pTimer;
    304             LPC_STATUS status = _ERROR;
    305          
    306             /* Get timer device structure */
    307             pTimer = (TIMER_CFG_T *) devid;
    308             if (pTimer->init == TRUE)
    309             {
    310                /* Disable all timer fucntions */
    311                pTimer->regptr->control &= ~TM_CTRL_ENABLE;
    312                pTimer->regptr->clear = 1;
    313                pTimer->regptr->load = 0;
    314          
    315                /* Disable timer system clock */
    316                cgu_clk_en_dis((CGU_CLOCK_ID_T)pTimer->clk_id, 0);
    317             }
    318          
    319             return status;
    320          }
    321          
    322          /***********************************************************************
    323           *
    324           * Function: timer_ioctl
    325           *
    326           * Purpose: Timer configuration block
    327           *
    328           * Processing:
    329           *     This function is a large case block. Based on the passed function
    330           *     and option values, set or get the appropriate timer parameter.
    331           *
    332           * Parameters:
    333           *     devid: Pointer to timer config structure
    334           *     cmd:   ioctl command
    335           *     arg:   ioctl argument
    336           *
    337           * Outputs: None
    338           *
    339           * Returns: The status of the ioctl operation
    340           *
    341           * Notes: None
    342           *
    343           **********************************************************************/
    344          LPC_STATUS timer_ioctl(INT_32 devid,
    345                                 INT_32 cmd,
    346                                 INT_32 arg)
    347          {
    348             UNS_32 tmp;
    349             TIMER_CFG_T *pTimer;
    350             TMR_CFG_ARG_T *pCfg;
    351             INT_32 status = _ERROR;
    352          
    353             /* Get timer device structure */
    354             pTimer = (TIMER_CFG_T *) devid;
    355             if (pTimer->init == TRUE)
    356             {
    357                status = _NO_ERROR;
    358          
    359                switch (cmd)
    360                {
    361                   case TMR_ENABLE:
    362                      if (arg != 0)
    363                      {
    364                         /* Enable the timer */
    365                         pTimer->regptr->control |= TM_CTRL_ENABLE;
    366                      }
    367                      else
    368                      {
    369                         /* Disable the timer */
    370                         pTimer->regptr->control &= ~TM_CTRL_ENABLE;
    371                      }
    372                      break;
    373          
    374                   case TMR_RESET:
    375                      cgu_soft_reset_module((CGU_MOD_ID_T)pTimer->reset_id);
    376                      break;
    377          
    378                   case TMR_CLEAR_INTS:
    379                      pTimer->regptr->clear = 1;
    380                      break;
    381          
    382                   case TMR_SET_CFG:
    383                      pCfg = (TMR_CFG_ARG_T*)arg;
    384                      tmp = 0;
    385                      pTimer->regptr->load = timer_usec_to_val((CGU_CLOCK_ID_T)pTimer->clk_id, pCfg->usecs, &tmp);
    386                      /* set periodic if requested */
    387                      if (pCfg->periodic)
    388                      {
    389                         tmp |= TM_CTRL_PERIODIC;
    390                      }
    391          
    392                      if (pCfg->enable)
    393                      {
    394                         /* Enable the timer */
    395                         tmp |= TM_CTRL_ENABLE;
    396                      }
    397                      pTimer->regptr->clear = 1;
    398                      pTimer->regptr->control = tmp;
    399                      break;
    400          
    401                   case TMR_SET_LOAD:
    402                      pTimer->regptr->load = (UNS_32) arg;
    403                      break;
    404          
    405                   case TMR_SET_PERIODIC_MODE:
    406                      if (arg != 0)
    407                         pTimer->regptr->load = (UNS_32) arg;
    408          
    409                      pTimer->regptr->control |= TM_CTRL_PERIODIC;
    410                      break;
    411          
    412                   case TMR_SET_FREERUN_MODE:
    413                      if (arg != 0)
    414                         pTimer->regptr->load = (UNS_32) arg;
    415          
    416                      pTimer->regptr->control &= ~TM_CTRL_PERIODIC;
    417                      break;
    418          
    419                   case TMR_SET_PSCALE:
    420                      tmp = pTimer->regptr->control & ~TM_CTRL_PS_MASK;
    421                      tmp = tmp | (arg & TM_CTRL_PS_MASK);
    422                      pTimer->regptr->control = tmp;
    423                      break;
    424          
    425                   case TMR_SET_MSECS:
    426                      arg = arg * 1000;
    427                   case TMR_SET_USECS:
    428                      tmp = pTimer->regptr->control;
    429                      pTimer->regptr->load = timer_usec_to_val((CGU_CLOCK_ID_T)pTimer->clk_id, arg, &tmp);
    430                      pTimer->regptr->control = tmp;
    431                      break;
    432          
    433                   case TMR_GET_STATUS:
    434                      /* Return a timer status */
    435                      switch (arg)
    436                      {
    437                         case TMR_GET_COUNT:
    438                            status = pTimer->regptr->value;
    439                            break;
    440          
    441                         case TMR_GET_PS_SCALE:
    442                            status = pTimer->regptr->control & TM_CTRL_PS_MASK;
    443                            break;
    444          
    445                         case TMR_GET_CLOCK:
    446                            status = cgu_get_clk_freq((CGU_CLOCK_ID_T)pTimer->clk_id);
    447                            break;
    448          
    449                         default:
    450                            /* Unsupported parameter */
    451                            status = LPC_BAD_PARAMS;
    452                            break;
    453                      }
    454                      break;
    455          
    456                   default:
    457                      /* Unsupported parameter */
    458                      status = LPC_BAD_PARAMS;
    459                }
    460             }
    461          
    462             return status;
    463          }
    464          
    465          /***********************************************************************
    466           *
    467           * Function: timer_read
    468           *
    469           * Purpose: Timer read function (stub only)
    470           *
    471           * Processing:
    472           *     Return 0 to the caller.
    473           *
    474           * Parameters:
    475           *     devid:     Pointer to timer descriptor
    476           *     buffer:    Pointer to data buffer to copy to
    477           *     max_bytes: Number of bytes to read
    478           *
    479           * Outputs: None
    480           *
    481           * Returns: Number of bytes actually read (always 0)
    482           *
    483           * Notes: None
    484           *
    485           **********************************************************************/
    486          INT_32 timer_read(INT_32 devid,
    487                            void *buffer,
    488                            INT_32 max_bytes)
    489          {
    490             return 0;
    491          }
    492          
    493          /***********************************************************************
    494           *
    495           * Function: timer_write
    496           *
    497           * Purpose: Timer write function (stub only)
    498           *
    499           * Processing:
    500           *     Return 0 to the caller.
    501           *
    502           * Parameters:
    503           *     devid:   Pointer to timer descriptor
    504           *     buffer:  Pointer to data buffer to copy from
    505           *     n_bytes: Number of bytes to write
    506           *
    507           * Outputs: None
    508           *
    509           * Returns: Number of bytes actually written (always 0)
    510           *
    511           * Notes: None
    512           *
    513           **********************************************************************/
    514          INT_32 timer_write(INT_32 devid,
    515                             void *buffer,
    516                             INT_32 n_bytes)
    517          {
    518             return 0;
    519          }
    520          
    521          /***********************************************************************
    522           *
    523           * Function: timer_wait_ms
    524           *
    525           * Purpose: Delay for msec milliseconds (minimum)
    526           *
    527           * Processing:
    528           *     See function.
    529           *
    530           * Parameters:
    531           *     pTimerRegs: Pointer to timer register set to use
    532           *     msec  :  the delay time in milliseconds
    533           *
    534           * Outputs: None
    535           *
    536           * Returns: Nothing
    537           *
    538           * Notes:
    539           *     Use of this function will destroy any previous timer settings
    540           *     (for the specific timer used) and should not be used if that
    541           *     timer is simultaneously being used for something else.
    542           *
    543           **********************************************************************/
    544          void timer_wait_ms(TIMER_REGS_T *pTimerRegs, UNS_32 msec)
    545          {
    546             timer_delay_cmn(pTimerRegs, (msec * 1000));
    547          }
    548          
    549          /***********************************************************************
    550           *
    551           * Function: timer_wait_us
    552           *
    553           * Purpose: Delay for usec microseconds (minimum)
    554           *
    555           * Processing:
    556           *     See function.
    557           *
    558           * Parameters:
    559           *     pTimerRegs: Pointer to timer register set to use
    560           *     usec  :  the delay time in microseconds
    561           *
    562           * Outputs: None
    563           *
    564           * Returns: Nothing
    565           *
    566           * Notes:
    567           *     Use of this function will destroy any previous timer settings
    568           *     (for the specific timer used) and should not be used if that
    569           *     timer is simultaneously being used for something else.
    570           *
    571           **********************************************************************/
    572          void timer_wait_us(TIMER_REGS_T *pTimerRegs, UNS_32 usec)
    573          {
    574             timer_delay_cmn(pTimerRegs, usec);
    575          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   cgu_clk_en_dis
       8   timer_close
         8   -> cgu_clk_en_dis
      16   timer_delay_cmn
        16   -> cgu_clk_en_dis
        16   -> timer_ptr_to_timer_num
        16   -> timer_usec_to_val
      24   timer_ioctl
        24   -> cgu_get_clk_freq
        24   -> cgu_soft_reset_module
        24   -> timer_usec_to_val
      16   timer_open
        16   -> cgu_clk_en_dis
        16   -> cgu_soft_reset_module
        16   -> timer_ptr_to_timer_num
       4   timer_ptr_to_timer_num
       0   timer_read
      16   timer_usec_to_val
        16   -> cgu_get_clk_freq
        16 __aeabi_lmul
        16 __aeabi_uldivmod
       8   timer_wait_ms
         8   -> timer_delay_cmn
       8   timer_wait_us
         8   -> timer_delay_cmn
       0   timer_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      66  cgu_clk_en_dis
      32  g_tmr_cfg
      54  timer_close
     142  timer_delay_cmn
     346  timer_ioctl
      62  timer_open
      48  timer_ptr_to_timer_num
       4  timer_read
     106  timer_usec_to_val
      14  timer_wait_ms
       8  timer_wait_us
       4  timer_write

 
  32 bytes in section .data
 894 bytes in section .text
 
 894 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
